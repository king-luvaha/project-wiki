"use strict";(self.webpackChunkproject_wiki=self.webpackChunkproject_wiki||[]).push([[1860],{8170:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Blogging Platform API/Step by Step Guide to Building a RESTful Blog API with Flask and MySQL","title":"Step by Step Guide to Building a RESTful Blog API with Flask and MySQL","description":"Welcome to this beginner-friendly guide on building a simple blog API using Python\'s Flask framework and MySQL as the backend database. By the end of this tutorial, you\u2019ll have a fully functional API that supports creating, reading, updating, deleting, and searching blog posts.","source":"@site/docs/Blogging Platform API/Step by Step Guide to Building a RESTful Blog API with Flask and MySQL.md","sourceDirName":"Blogging Platform API","slug":"/Blogging Platform API/Step by Step Guide to Building a RESTful Blog API with Flask and MySQL","permalink":"/project-wiki/docs/Blogging Platform API/Step by Step Guide to Building a RESTful Blog API with Flask and MySQL","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Build a Blogging Platform API - Explained Line by Line","permalink":"/project-wiki/docs/Blogging Platform API/Build a Blogging Platform API - Explained Line by Line"},"next":{"title":"Django Calculator App \u2013 Full Step-by-Step Guide (Explained)","permalink":"/project-wiki/docs/Django Calculator App/Django Calculator App \u2013 Full Step-by-Step Guide (Explained)"}}');var o=t(4848),i=t(8453);const r={},l=void 0,a={},d=[{value:"\u2728 What You&#39;ll Build",id:"-what-youll-build",level:2},{value:"\ud83d\ude80 Tech Stack",id:"-tech-stack",level:2},{value:"\ud83d\udcc1 Folder Structure",id:"-folder-structure",level:2},{value:"\ud83d\udcc6 Step 1: Project Setup",id:"-step-1-project-setup",level:2},{value:"\u2705 Prerequisites",id:"-prerequisites",level:3},{value:"\ud83d\udd27 Set Up Your Folder",id:"-set-up-your-folder",level:3},{value:"\ud83d\udd39 Install Required Packages",id:"-install-required-packages",level:3},{value:"\ud83d\udcc4 Create Starter Files",id:"-create-starter-files",level:3},{value:"\ud83d\udd10 Step 2: Environment Variables",id:"-step-2-environment-variables",level:2},{value:"\ud83d\udcca Step 3: Set Up the MySQL Database",id:"-step-3-set-up-the-mysql-database",level:2},{value:"\ud83d\udcc2 Step 4: Initialize Flask App",id:"-step-4-initialize-flask-app",level:2},{value:"\ud83d\udd1a Step 5: Implement CRUD Endpoints",id:"-step-5-implement-crud-endpoints",level:2},{value:"\u2795 Create a Post",id:"-create-a-post",level:3},{value:"\ud83d\udd00 Update a Post",id:"-update-a-post",level:3},{value:"\ud83d\udeae Delete a Post",id:"-delete-a-post",level:3},{value:"\ud83d\udcc4 Get One Post",id:"-get-one-post",level:3},{value:"\ud83d\udcc3 Get All / Search Posts",id:"-get-all--search-posts",level:3},{value:"\ud83d\udd0d Step 6: Test the API",id:"-step-6-test-the-api",level:2},{value:"\ud83c\udfc1 Step 7: Run the Application",id:"-step-7-run-the-application",level:2},{value:"\u2705 Why this is important",id:"-why-this-is-important",level:3},{value:"\ud83d\ude80 What\u2019s Next?",id:"-whats-next",level:2},{value:"\ud83c\udfa8 Bonus: Frontend Integration with React (Educational Only)",id:"-bonus-frontend-integration-with-react-educational-only",level:2},{value:"\ud83d\udee0\ufe0f Setup",id:"\ufe0f-setup",level:3},{value:"\ud83d\udcc4 Fetch All Posts Example",id:"-fetch-all-posts-example",level:3},{value:"\ud83d\ude0a Conclusion",id:"-conclusion",level:2}];function c(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Welcome to this beginner-friendly guide on building a simple blog API using Python's Flask framework and MySQL as the backend database. By the end of this tutorial, you\u2019ll have a fully functional API that supports creating, reading, updating, deleting, and searching blog posts."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-what-youll-build",children:"\u2728 What You'll Build"}),"\n",(0,o.jsx)(n.p,{children:"A RESTful API with endpoints to:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Create a blog post"}),"\n",(0,o.jsx)(n.li,{children:"Read single or all posts"}),"\n",(0,o.jsx)(n.li,{children:"Update a post"}),"\n",(0,o.jsx)(n.li,{children:"Delete a post"}),"\n",(0,o.jsx)(n.li,{children:"Search posts by keyword (title, content, category)"}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-tech-stack",children:"\ud83d\ude80 Tech Stack"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Backend"}),": Flask (Python)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Database"}),": MySQL (via MySQL Workbench)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ORM"}),": Raw SQL with ",(0,o.jsx)(n.code,{children:"flask-mysqldb"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Extras"}),": ",(0,o.jsx)(n.code,{children:"python-dotenv"})," for environment variables, ",(0,o.jsx)(n.code,{children:"flask-cors"})," for cross-origin access"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-folder-structure",children:"\ud83d\udcc1 Folder Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\nblog-api/  \n\u251c\u2500\u2500 app.py             # Main Flask application  \n\u251c\u2500\u2500 .env               # Environment variables (DO NOT COMMIT)  \n\u251c\u2500\u2500 .gitignore         # Git ignore list  \n\u251c\u2500\u2500 requirements.txt   # Python dependencies  \n\u2514\u2500\u2500 README.md          # Setup and usage guide\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-step-1-project-setup",children:"\ud83d\udcc6 Step 1: Project Setup"}),"\n",(0,o.jsx)(n.h3,{id:"-prerequisites",children:"\u2705 Prerequisites"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Python 3.7+"}),"\n",(0,o.jsx)(n.li,{children:"MySQL Server (preferably via MySQL Workbench)"}),"\n",(0,o.jsx)(n.li,{children:"Git"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"-set-up-your-folder",children:"\ud83d\udd27 Set Up Your Folder"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mkdir blog-api\ncd blog-api\npython -m venv venv\nvenv/Scripts/activate  # Windows\n"})}),"\n",(0,o.jsx)(n.h3,{id:"-install-required-packages",children:"\ud83d\udd39 Install Required Packages"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pip install flask flask-mysqldb flask-cors python-dotenv\npip freeze > requirements.txt\n"})}),"\n",(0,o.jsx)(n.h3,{id:"-create-starter-files",children:"\ud83d\udcc4 Create Starter Files"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"app.py"})," (main backend logic)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:".env"})," (credentials)"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:".gitignore"})}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-step-2-environment-variables",children:"\ud83d\udd10 Step 2: Environment Variables"}),"\n",(0,o.jsxs)(n.p,{children:["Create a ",(0,o.jsx)(n.code,{children:".env"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-env",children:"MYSQL_HOST=localhost\nMYSQL_USER=root\nMYSQL_PASSWORD=yourpassword\nMYSQL_DB=blogdb\nMYSQL_PORT=3306          # Default port is '3306'. You can change to preffered PORT\n"})}),"\n",(0,o.jsx)(n.p,{children:"Why? To keep your MySQL credentials secure and separate from code."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-step-3-set-up-the-mysql-database",children:"\ud83d\udcca Step 3: Set Up the MySQL Database"}),"\n",(0,o.jsxs)(n.p,{children:["Open ",(0,o.jsx)(n.strong,{children:"MySQL Workbench"})," and run this SQL:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"CREATE DATABASE IF NOT EXISTS blogdb;\nUSE blogdb;\n\nCREATE TABLE IF NOT EXISTS posts (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(255),\n    content TEXT,\n    category VARCHAR(100),\n    tags TEXT,\n    created_at DATETIME,\n    updated_at DATETIME\n);\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-step-4-initialize-flask-app",children:"\ud83d\udcc2 Step 4: Initialize Flask App"}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"app.py"}),", write:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import os\nimport json\nfrom datetime import datetime\nfrom flask import Flask, request, jsonify\nfrom flask_mysqldb import MySQL\nfrom flask_cors import CORS\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\napp = Flask(__name__)\nCORS(app)\n\n# Load config from .env\napp.config['MYSQL_HOST'] = os.getenv('MYSQL_HOST')\napp.config['MYSQL_USER'] = os.getenv('MYSQL_USER')\napp.config['MYSQL_PASSWORD'] = os.getenv('MYSQL_PASSWORD')\napp.config['MYSQL_DB'] = os.getenv('MYSQL_DB')\napp.config['MYSQL_PORT'] = int(os.getenv('MYSQL_PORT', 3306))\n\nmysql = MySQL(app)\n\n# Helper function to serialize rows\ndef serialize_post(row):\n    return {\n        \"id\": row[0],\n        \"title\": row[1],\n        \"content\": row[2],\n        \"category\": row[3],\n        \"tags\": json.loads(row[4]),\n        \"createdAt\": row[5].isoformat(),\n        \"updatedAt\": row[6].isoformat()\n    }\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-step-5-implement-crud-endpoints",children:"\ud83d\udd1a Step 5: Implement CRUD Endpoints"}),"\n",(0,o.jsx)(n.h3,{id:"-create-a-post",children:"\u2795 Create a Post"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"@app.route('/posts', methods=['POST'])\ndef create_post():\n    data = request.get_json()\n    if not all(field in data for field in ['title', 'content', 'category', 'tags']):\n        return jsonify({\"error\": \"Missing fields\"}), 400\n\n    now = datetime.utcnow()\n    cursor = mysql.connection.cursor()\n    cursor.execute(\"\"\"\n        INSERT INTO posts (title, content, category, tags, created_at, updated_at)\n        VALUES (%s, %s, %s, %s, %s, %s)\n    \"\"\", (data['title'], data['content'], data['category'], json.dumps(data['tags']), now, now))\n    mysql.connection.commit()\n    post_id = cursor.lastrowid\n    cursor.close()\n\n    return jsonify({\n        \"id\": post_id,\n        **data,\n        \"createdAt\": now.isoformat(),\n        \"updatedAt\": now.isoformat()\n    }), 201\n"})}),"\n",(0,o.jsx)(n.h3,{id:"-update-a-post",children:"\ud83d\udd00 Update a Post"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@app.route(\'/posts/<int:post_id>\', methods=[\'PUT\'])\ndef update_post(post_id):\n    data = request.get_json()\n    if not all(field in data for field in [\'title\', \'content\', \'category\', \'tags\']):\n        return jsonify({"error": "Missing fields"}), 400\n\n    cursor = mysql.connection.cursor()\n    cursor.execute("SELECT * FROM posts WHERE id = %s", (post_id,))\n    row = cursor.fetchone()\n    if not row:\n        return jsonify({"error": "Post not found"}), 404\n\n    now = datetime.utcnow()\n    cursor.execute("""\n        UPDATE posts SET title = %s, content = %s, category = %s, tags = %s, updated_at = %s\n        WHERE id = %s\n    """, (data[\'title\'], data[\'content\'], data[\'category\'], json.dumps(data[\'tags\']), now, post_id))\n    mysql.connection.commit()\n    cursor.close()\n\n    return jsonify({\n        "id": post_id,\n        **data,\n        "createdAt": row[5].isoformat(),\n        "updatedAt": now.isoformat()\n    })\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-delete-a-post",children:"\ud83d\udeae Delete a Post"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@app.route(\'/posts/<int:post_id>\', methods=[\'DELETE\'])\ndef delete_post(post_id):\n    cursor = mysql.connection.cursor()\n    cursor.execute("SELECT id FROM posts WHERE id = %s", (post_id,))\n    if not cursor.fetchone():\n        return jsonify({"error": "Post not found"}), 404\n\n    cursor.execute("DELETE FROM posts WHERE id = %s", (post_id,))\n    mysql.connection.commit()\n    cursor.close()\n    return \'\', 204\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-get-one-post",children:"\ud83d\udcc4 Get One Post"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@app.route(\'/posts/<int:post_id>\', methods=[\'GET\'])\ndef get_post(post_id):\n    cursor = mysql.connection.cursor()\n    cursor.execute("SELECT * FROM posts WHERE id = %s", (post_id,))\n    row = cursor.fetchone()\n    cursor.close()\n    if not row:\n        return jsonify({"error": "Post not found"}), 404\n    return jsonify(serialize_post(row))\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-get-all--search-posts",children:"\ud83d\udcc3 Get All / Search Posts"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@app.route(\'/posts\', methods=[\'GET\'])\ndef get_all_posts():\n    term = request.args.get(\'term\', \'\')\n    cursor = mysql.connection.cursor()\n    if term:\n        query = """\n            SELECT * FROM posts\n            WHERE title LIKE %s OR content LIKE %s OR category LIKE %s\n        """\n        wildcard = f"%{term}%"\n        cursor.execute(query, (wildcard, wildcard, wildcard))\n    else:\n        cursor.execute("SELECT * FROM posts")\n    rows = cursor.fetchall()\n    cursor.close()\n    return jsonify([serialize_post(row) for row in rows])\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-step-6-test-the-api",children:"\ud83d\udd0d Step 6: Test the API"}),"\n",(0,o.jsx)(n.p,{children:"Use tools like Postman or Thunder Client:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"POST /posts"})," to add"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"GET /posts"})," to view"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"PUT /posts/1"})," to update"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"DELETE /posts/1"})," to delete"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"GET /posts?term=python"})," to search"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Example JSON:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "title": "Hello World",\n  "content": "My first blog post!",\n  "category": "Intro",\n  "tags": ["Flask", "MySQL"]\n}\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-step-7-run-the-application",children:"\ud83c\udfc1 Step 7: Run the Application"}),"\n",(0,o.jsxs)(n.p,{children:["At the bottom of your ",(0,o.jsx)(n.code,{children:"app.py"})," file, include:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"if __name__ == '__main__':\n    app.run(debug=True)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"-why-this-is-important",children:"\u2705 Why this is important"}),"\n",(0,o.jsxs)(n.p,{children:["This block ensures that the Flask development server starts ",(0,o.jsx)(n.strong,{children:"only"})," if the script is executed directly (e.g., via ",(0,o.jsx)(n.code,{children:"python app.py"}),"). This is a Python best practice that avoids running code unintentionally when the module is imported elsewhere."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"debug=True"})," enables hot reloading and detailed error messages."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-whats-next",children:"\ud83d\ude80 What\u2019s Next?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Add pagination"}),"\n",(0,o.jsx)(n.li,{children:"Add user accounts and auth"}),"\n",(0,o.jsx)(n.li,{children:"Deploy to a platform like Render"}),"\n",(0,o.jsx)(n.li,{children:"Connect it to a frontend (e.g., React)"}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-bonus-frontend-integration-with-react-educational-only",children:"\ud83c\udfa8 Bonus: Frontend Integration with React (Educational Only)"}),"\n",(0,o.jsx)(n.p,{children:"If you'd like to build a simple frontend to consume this API, here\u2019s a very basic idea using React:"}),"\n",(0,o.jsx)(n.h3,{id:"\ufe0f-setup",children:"\ud83d\udee0\ufe0f Setup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npx create-react-app blog-client\ncd blog-client\nnpm install axios\n"})}),"\n",(0,o.jsx)(n.h3,{id:"-fetch-all-posts-example",children:"\ud83d\udcc4 Fetch All Posts Example"}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"App.js"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"import { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    axios.get('http://localhost:5000/posts')\n      .then(res => setPosts(res.data))\n      .catch(err => console.error(err));\n  }, []);\n\n  return (\n    <div>\n      <h1>Blog Posts</h1>\n      {posts.map(post => (\n        <div key={post.id}>\n          <h2>{post.title}</h2>\n          <p>{post.content}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Make sure CORS is enabled in Flask and both backend (",(0,o.jsx)(n.code,{children:"localhost:5000"}),") and frontend (",(0,o.jsx)(n.code,{children:"localhost:3000"}),") are running."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-conclusion",children:"\ud83d\ude0a Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"You now have a working blog API using Flask and MySQL. This is a solid foundation for real-world projects or learning backend development."}),"\n",(0,o.jsx)(n.p,{children:"Happy building! \ud83d\ude80"})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(6540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);