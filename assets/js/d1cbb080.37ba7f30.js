"use strict";(self.webpackChunkproject_wiki=self.webpackChunkproject_wiki||[]).push([[9847],{4334:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Weather API/Build a Weather API - Explained Line by Line","title":"Build a Weather API - Explained Line by Line","description":"This guide provides a comprehensive line-by-line explanation of a Flask weather API with Redis caching. Perfect for teaching beginners how to build production-ready APIs!","source":"@site/docs/Weather API/Build a Weather API - Explained Line by Line.md","sourceDirName":"Weather API","slug":"/Weather API/Build a Weather API - Explained Line by Line","permalink":"/project-wiki/docs/Weather API/Build a Weather API - Explained Line by Line","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Weather API","permalink":"/project-wiki/docs/Weather API/"},"next":{"title":"Step by Step Guide for the Weather API Setup","permalink":"/project-wiki/docs/Weather API/Step by Step Guide for the Weather API Setup"}}');var r=s(4848),t=s(8453);const c={},l=void 0,h={},a=[{value:"Import Statements - Setting Up Our Tools",id:"import-statements---setting-up-our-tools",level:2},{value:"Application Setup",id:"application-setup",level:2},{value:"Route Definitions - The API Endpoints",id:"route-definitions---the-api-endpoints",level:2},{value:"Request Processing",id:"request-processing",level:2},{value:"Cache Logic",id:"cache-logic",level:2},{value:"API Call and Caching",id:"api-call-and-caching",level:2},{value:"Application Runner",id:"application-runner",level:2},{value:"How It All Works Together",id:"how-it-all-works-together",level:2},{value:"Import Statements - Getting Our Tools Ready",id:"import-statements---getting-our-tools-ready",level:2},{value:"Configuration - Setting Up Our API Key",id:"configuration---setting-up-our-api-key",level:2},{value:"The Weather Function - Where the Magic Happens",id:"the-weather-function---where-the-magic-happens",level:2},{value:"Building the API URL - Crafting Our Request",id:"building-the-api-url---crafting-our-request",level:2},{value:"Making the API Call - Sending Our Request",id:"making-the-api-call---sending-our-request",level:2},{value:"Error Handling - Dealing with Problems",id:"error-handling---dealing-with-problems",level:2},{value:"Returning the Data - Success!",id:"returning-the-data---success",level:2},{value:"How This Function Fits Into Our App",id:"how-this-function-fits-into-our-app",level:2},{value:"What is Caching and Why Do We Need It?",id:"what-is-caching-and-why-do-we-need-it",level:2},{value:"Import Statements - Getting Our Tools Ready",id:"import-statements---getting-our-tools-ready-1",level:2},{value:"Redis Connection Setup",id:"redis-connection-setup",level:2},{value:"Cache Retrieval Function - Getting Data Out",id:"cache-retrieval-function---getting-data-out",level:2},{value:"Cache Storage Function - Putting Data In",id:"cache-storage-function---putting-data-in",level:2},{value:"How These Functions Work Together",id:"how-these-functions-work-together",level:2},{value:"When a user requests weather data:",id:"when-a-user-requests-weather-data",level:3},{value:"The beauty of this system:",id:"the-beauty-of-this-system",level:3},{value:"Performance Impact",id:"performance-impact",level:2},{value:"Real-World Cache Scenarios",id:"real-world-cache-scenarios",level:2},{value:"Architecture Principles",id:"architecture-principles",level:2},{value:"Key Learning Outcomes",id:"key-learning-outcomes",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This guide provides a comprehensive line-by-line explanation of a Flask weather API with Redis caching. Perfect for teaching beginners how to build production-ready APIs!"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"part-1-main-application---apppy",children:"Part 1: Main Application - app.py"}),"\n",(0,r.jsx)(n.p,{children:"Let's break down this Flask weather API code line by line to understand how it works!"}),"\n",(0,r.jsx)(n.h2,{id:"import-statements---setting-up-our-tools",children:"Import Statements - Setting Up Our Tools"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from flask import Flask, request, jsonify\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["We're importing three essential pieces from Flask:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Flask"}),": The main class that creates our web application"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"request"}),": Lets us access data sent by users (like URL parameters)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"jsonify"}),": Converts Python dictionaries into JSON format for API responses"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," Think of Flask as your web server toolkit. These imports give us the basic tools to build a web API."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from dotenv import load_dotenv\nimport os\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"load_dotenv"}),": Loads environment variables from a ",(0,r.jsx)(n.code,{children:".env"})," file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"os"}),": Python's built-in module for interacting with the operating system"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," We use ",(0,r.jsx)(n.code,{children:".env"})," files to store sensitive information like API keys. This keeps secrets out of our code and makes our app more secure."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from weather_api import get_weather\nfrom cache import cache_get, cache_set\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["We're importing custom functions from our other Python files:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_weather"}),": Function that fetches weather data from the Visual Crossing API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cache_get"})," and ",(0,r.jsx)(n.code,{children:"cache_set"}),": Functions that handle Redis caching"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," This is modular programming! Instead of putting all our code in one file, we split it into logical pieces. This makes our code easier to read, test, and maintain."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Limiter"}),": A Flask extension that limits how many requests users can make"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_remote_address"}),": Helper function that identifies users by their IP address"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," Rate limiting prevents abuse of our API. Without it, someone could spam our API with thousands of requests and crash our server or exhaust our API quotas."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"application-setup",children:"Application Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"load_dotenv()\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's happening here?"})," This loads all the environment variables from our ",(0,r.jsx)(n.code,{children:".env"})," file into memory."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," Now we can access our API keys and other sensitive data using ",(0,r.jsx)(n.code,{children:"os.getenv()"})," throughout our application."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"app = Flask(__name__)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's happening here?"})," We're creating our Flask application instance. ",(0,r.jsx)(n.code,{children:"__name__"})," tells Flask the name of the current module."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," This creates the foundation of our web application. Everything else will be built on top of this ",(0,r.jsx)(n.code,{children:"app"})," object."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"limiter = Limiter(app=app, key_func=get_remote_address)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We're setting up rate limiting for our Flask app"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key_func=get_remote_address"})," means we'll track limits per IP address"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," This protects our API from being overwhelmed. Each IP address will have its own request limit."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"route-definitions---the-api-endpoints",children:"Route Definitions - The API Endpoints"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@app.route(\'/\')\ndef home():\n    return {"message": "Welcome to the Weather API!"}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@app.route('/')"}),": This decorator tells Flask that when someone visits the root URL, call this function"]}),"\n",(0,r.jsx)(n.li,{children:"The function returns a simple welcome message as a Python dictionary"}),"\n",(0,r.jsx)(n.li,{children:"Flask automatically converts the dictionary to JSON"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"}),' This gives users a friendly landing page and confirms the API is running. It\'s like a "hello world" for APIs.']}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@app.route('/weather')\n@limiter.limit(\"10/minute\")\ndef weather():\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@app.route('/weather')"}),": When someone visits ",(0,r.jsx)(n.code,{children:"/weather"}),", call this function"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'@limiter.limit("10/minute")'}),": Limit each IP to 10 requests per minute"]}),"\n",(0,r.jsxs)(n.li,{children:["We define a function called ",(0,r.jsx)(n.code,{children:"weather()"})," to handle these requests"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," This creates our main API endpoint. The rate limit ensures fair usage and protects our server."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"request-processing",children:"Request Processing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"city = request.args.get('city')\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's happening here?"})," We're extracting the 'city' parameter from the URL. For example, in ",(0,r.jsx)(n.code,{children:"/weather?city=London"}),', this would get "London".']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," Users need to tell us which city they want weather data for. URL parameters are a standard way to pass data to APIs."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'if not city:\n    return jsonify({"error": "City parameter is required"}), 400\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We check if the city parameter is missing or empty"}),"\n",(0,r.jsx)(n.li,{children:"If so, we return an error message with HTTP status code 400 (Bad Request)"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"jsonify()"})," converts our error dictionary into proper JSON format"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," Input validation is crucial! We need to handle cases where users don't provide required information gracefully."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"cache-logic",children:"Cache Logic"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'cached = cache_get(city)\nif cached:\n    return jsonify({"source": "cache", "data": cached})\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We check if we already have weather data for this city in our Redis cache"}),"\n",(0,r.jsx)(n.li,{children:'If we do, we return it immediately with a "cache" source label'}),"\n",(0,r.jsx)(n.li,{children:"This avoids making unnecessary API calls"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," Caching improves performance and reduces costs. Weather data doesn't change every second, so we can serve recent data from cache instead of hitting the external API every time."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"api-call-and-caching",children:"API Call and Caching"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'try:\n    data = get_weather(city)\n    cache_set(city, data, ex=43200)\n    return jsonify({"source": "api", "data": data})\nexcept Exception as e:\n    return jsonify({"error": str(e)}), 500\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"try"}),": We attempt to get fresh weather data from the API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"data = get_weather(city)"}),": Call our weather API function"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cache_set(city, data, ex=43200)"}),": Store the result in cache for 12 hours (43200 seconds)"]}),"\n",(0,r.jsx)(n.li,{children:'We return the data with an "api" source label'}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"except"}),": If anything goes wrong, we catch the error and return a 500 status code"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why do we need this?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The try/except handles errors gracefully (network issues, invalid cities, etc.)"}),"\n",(0,r.jsx)(n.li,{children:"We cache the result so future requests for the same city will be faster"}),"\n",(0,r.jsx)(n.li,{children:"The source label helps users know if they're getting cached or fresh data"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"application-runner",children:"Application Runner"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"if __name__ == '__main__':\n    app.run(debug=True)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This only runs if we execute this file directly (not when imported)"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"debug=True"})," enables development mode with helpful error messages and auto-reload"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," This lets us run our Flask app for development and testing. In production, we'd use a proper WSGI server instead."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"how-it-all-works-together",children:"How It All Works Together"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User makes request"})," \u2192 ",(0,r.jsx)(n.code,{children:"/weather?city=London"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rate limiting checks"})," \u2192 Is this IP under the limit?"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input validation"})," \u2192 Did they provide a city name?"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cache check"})," \u2192 Do we have recent data for London?"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"If cached"})," \u2192 Return cached data immediately"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"If not cached"})," \u2192 Call external weather API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Store in cache"})," \u2192 Save the result for future requests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return response"})," \u2192 Send JSON data back to user"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This architecture is efficient, robust, and scalable!"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"part-2-weather-api-integration---weather_apipy",children:"Part 2: Weather API Integration - weather_api.py"}),"\n",(0,r.jsx)(n.p,{children:"Let's break down this weather API integration code line by line to understand how we fetch weather data from Visual Crossing!"}),"\n",(0,r.jsx)(n.h2,{id:"import-statements---getting-our-tools-ready",children:"Import Statements - Getting Our Tools Ready"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import requests\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's happening here?"})," We're importing the ",(0,r.jsx)(n.code,{children:"requests"})," library, which is Python's most popular HTTP client library."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," The ",(0,r.jsx)(n.code,{children:"requests"})," library makes it incredibly easy to make HTTP calls to external APIs. Without it, we'd have to use Python's built-in ",(0,r.jsx)(n.code,{children:"urllib"})," which is much more complicated. Think of ",(0,r.jsx)(n.code,{children:"requests"})," as your friendly messenger that can talk to other websites and APIs for you."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Real-world analogy:"})," It's like having a personal assistant who can make phone calls to other companies to get information for you, instead of you having to make those calls directly."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import os\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's happening here?"})," We're importing Python's built-in ",(0,r.jsx)(n.code,{children:"os"})," module, which lets us interact with the operating system."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," We need access to environment variables (like our secret API key) that are stored at the system level. This keeps sensitive information out of our code."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Security note:"})," Never hardcode API keys in your source code! Environment variables are a secure way to store secrets."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"configuration---setting-up-our-api-key",children:"Configuration - Setting Up Our API Key"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'API_KEY = os.getenv("API_KEY")\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'os.getenv("API_KEY")'}),' looks for an environment variable named "API_KEY"']}),"\n",(0,r.jsxs)(n.li,{children:["We store whatever value it finds in the ",(0,r.jsx)(n.code,{children:"API_KEY"})," variable"]}),"\n",(0,r.jsxs)(n.li,{children:["If no environment variable is found, this returns ",(0,r.jsx)(n.code,{children:"None"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," This is a security best practice! Our Visual Crossing API key is stored safely in our ",(0,r.jsx)(n.code,{children:".env"})," file, not in our source code. This means:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We can share our code without exposing our API key"}),"\n",(0,r.jsx)(n.li,{children:"Different environments (development, testing, production) can use different keys"}),"\n",(0,r.jsx)(n.li,{children:"If someone gets access to our code, they can't steal our API key"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What could go wrong?"})," If the API_KEY environment variable isn't set, this will be ",(0,r.jsx)(n.code,{children:"None"}),", and our API calls will fail. In production code, you might want to add validation here."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"the-weather-function---where-the-magic-happens",children:"The Weather Function - Where the Magic Happens"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_weather(city):\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's happening here?"})," We're defining a function called ",(0,r.jsx)(n.code,{children:"get_weather"})," that takes one parameter: ",(0,r.jsx)(n.code,{children:"city"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," Functions are reusable blocks of code. By creating this function, we can get weather data for any city by simply calling ",(0,r.jsx)(n.code,{children:'get_weather("London")'})," or ",(0,r.jsx)(n.code,{children:'get_weather("Paris")'}),". This makes our code modular and easy to use."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Design principle:"})," This function has a single responsibility: fetch weather data for a given city. This follows the Single Responsibility Principle, making our code easier to test and maintain."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"building-the-api-url---crafting-our-request",children:"Building the API URL - Crafting Our Request"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'url = f"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{city}?unitGroup=metric&key={API_KEY}&contentType=json"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's happening here?"})," We're building a URL string using an f-string (formatted string literal) that includes:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The base Visual Crossing API endpoint"}),"\n",(0,r.jsx)(n.li,{children:"The city name (inserted dynamically)"}),"\n",(0,r.jsx)(n.li,{children:"Query parameters for our preferences"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Let's break down the URL parts:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/"})," - Base API endpoint"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"{city}"})," - The city name we want weather for (dynamically inserted)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"?unitGroup=metric"})," - We want temperatures in Celsius, not Fahrenheit"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"&key={API_KEY}"})," - Our authentication key (dynamically inserted)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"&contentType=json"})," - We want the response in JSON format"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why f-strings?"})," F-strings are the modern, readable way to format strings in Python. They're faster and clearer than older methods like ",(0,r.jsx)(n.code,{children:".format()"})," or ",(0,r.jsx)(n.code,{children:"%"})," formatting."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example of what this URL looks like:"})," If ",(0,r.jsx)(n.code,{children:'city="London"'}),' and your API key is "abc123", the URL becomes:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/London?unitGroup=metric&key=abc123&contentType=json\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"making-the-api-call---sending-our-request",children:"Making the API Call - Sending Our Request"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"response = requests.get(url)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["We use ",(0,r.jsx)(n.code,{children:"requests.get()"})," to make an HTTP GET request to our constructed URL"]}),"\n",(0,r.jsx)(n.li,{children:"The Visual Crossing server processes our request and sends back a response"}),"\n",(0,r.jsxs)(n.li,{children:["We store that response in the ",(0,r.jsx)(n.code,{children:"response"})," variable"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why GET request?"})," GET requests are used for retrieving data (as opposed to POST for creating, PUT for updating, etc.). Since we're just asking for weather information, GET is the appropriate HTTP method."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's in the response?"})," The ",(0,r.jsx)(n.code,{children:"response"})," object contains:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Status code (200 for success, 404 for not found, etc.)"}),"\n",(0,r.jsx)(n.li,{children:"Headers (metadata about the response)"}),"\n",(0,r.jsx)(n.li,{children:"Body (the actual weather data)"}),"\n",(0,r.jsx)(n.li,{children:"And much more!"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Real-world analogy:"}),' This is like sending a letter to the weather service asking "What\'s the weather in London?" and waiting for their reply letter.']}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"error-handling---dealing-with-problems",children:"Error Handling - Dealing with Problems"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'if response.status_code != 200:\n    raise Exception("Error fetching weather data")\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'We check if the HTTP status code is NOT 200 (which means "OK/Success")'}),"\n",(0,r.jsx)(n.li,{children:"If it's anything else (404, 500, 403, etc.), we raise an exception"}),"\n",(0,r.jsx)(n.li,{children:"This stops the function execution and signals that something went wrong"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," Not all API calls succeed! Common reasons for failure:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Invalid city name (404 Not Found)"}),"\n",(0,r.jsx)(n.li,{children:"API key problems (401 Unauthorized or 403 Forbidden)"}),"\n",(0,r.jsx)(n.li,{children:"Server issues (500 Internal Server Error)"}),"\n",(0,r.jsx)(n.li,{children:"Network problems"}),"\n",(0,r.jsx)(n.li,{children:"Rate limit exceeded (429 Too Many Requests)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What are HTTP status codes?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"200: Success! Everything worked perfectly"}),"\n",(0,r.jsx)(n.li,{children:"400: Bad Request (we sent invalid data)"}),"\n",(0,r.jsx)(n.li,{children:"401: Unauthorized (API key missing/invalid)"}),"\n",(0,r.jsx)(n.li,{children:"404: Not Found (city doesn't exist)"}),"\n",(0,r.jsx)(n.li,{children:"500: Server Error (their server has problems)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why raise an exception?"})," Exceptions are Python's way of handling errors. When we raise an exception:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The calling code (in ",(0,r.jsx)(n.code,{children:"app.py"}),") can catch it with try/except"]}),"\n",(0,r.jsx)(n.li,{children:"We can provide meaningful error messages to users"}),"\n",(0,r.jsx)(n.li,{children:"Our app doesn't crash silently"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"returning-the-data---success",children:"Returning the Data - Success!"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"return response.json()\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"response.json()"})," converts the JSON response from Visual Crossing into a Python dictionary"]}),"\n",(0,r.jsx)(n.li,{children:"We return that dictionary to whoever called our function"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why .json()?"})," APIs typically return data in JSON format (JavaScript Object Notation). JSON looks like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "temperature": 15.2,\n  "description": "Partly cloudy",\n  "humidity": 65\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:".json()"})," method converts this JSON string into a Python dictionary that we can work with easily."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What gets returned?"})," A complex dictionary containing weather data like:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Current temperature, humidity, wind speed"}),"\n",(0,r.jsx)(n.li,{children:"Weather description and conditions"}),"\n",(0,r.jsx)(n.li,{children:"Forecast for upcoming days"}),"\n",(0,r.jsx)(n.li,{children:"Historical data"}),"\n",(0,r.jsx)(n.li,{children:"And much more!"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"how-this-function-fits-into-our-app",children:"How This Function Fits Into Our App"}),"\n",(0,r.jsx)(n.p,{children:"Here's the flow when someone requests weather data:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User visits"})," ",(0,r.jsx)(n.code,{children:"/weather?city=London"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"app.py calls"})," ",(0,r.jsx)(n.code,{children:'get_weather("London")'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"This function builds"})," the Visual Crossing API URL"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Makes HTTP request"})," to Visual Crossing servers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Checks for errors"})," in the response"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Converts JSON to Python dict"})," and returns it"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"app.py receives"})," the weather data and sends it to the user"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"part-3-redis-caching-system---cachepy",children:"Part 3: Redis Caching System - cache.py"}),"\n",(0,r.jsx)(n.p,{children:"Let's break down this Redis caching code line by line to understand how we store and retrieve data for lightning-fast performance!"}),"\n",(0,r.jsx)(n.h2,{id:"what-is-caching-and-why-do-we-need-it",children:"What is Caching and Why Do We Need It?"}),"\n",(0,r.jsx)(n.p,{children:"Before diving into the code, let's understand caching:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What is caching?"})," Caching is like keeping frequently used items in an easily accessible place. Imagine you have a cookbook you use daily - instead of going to the library every time, you keep it on your kitchen counter."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why cache weather data?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Weather doesn't change every second"}),"\n",(0,r.jsx)(n.li,{children:"External API calls are slow (network latency)"}),"\n",(0,r.jsx)(n.li,{children:"External APIs often have usage limits"}),"\n",(0,r.jsx)(n.li,{children:"Users expect fast responses"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Real-world analogy:"})," It's like a coffee shop memorizing regular customers' orders instead of asking every time!"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"import-statements---getting-our-tools-ready-1",children:"Import Statements - Getting Our Tools Ready"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import redis\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's happening here?"})," We're importing the ",(0,r.jsx)(n.code,{children:"redis"})," library, which is the Python client for Redis database."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What is Redis?"})," Redis is an in-memory data store that's incredibly fast. Think of it as a super-fast notebook that can store key-value pairs in your computer's RAM instead of on the slow hard drive."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why Redis for caching?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lightning fast"}),": Data is stored in RAM, not on disk"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Simple"}),": Perfect for key-value storage (city name \u2192 weather data)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automatic expiration"}),": Data can automatically disappear after a set time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Widely used"}),": Industry standard for caching"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import os\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's happening here?"})," We're importing Python's built-in ",(0,r.jsx)(n.code,{children:"os"})," module for accessing environment variables."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," We need to get the Redis connection URL from our environment variables, just like we did with the API key. This keeps our configuration flexible and secure."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import json\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's happening here?"})," We're importing Python's built-in ",(0,r.jsx)(n.code,{children:"json"})," module for converting data between Python objects and JSON strings."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need JSON here?"})," Redis can only store strings, but our weather data is complex Python dictionaries. JSON acts as our translator:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Going in"}),": Python dict \u2192 JSON string \u2192 Redis"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Coming out"}),": Redis \u2192 JSON string \u2192 Python dict"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"redis-connection-setup",children:"Redis Connection Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'redis_url = os.getenv("REDIS_URL", "redis://localhost:6379")\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'os.getenv("REDIS_URL", "redis://localhost:6379")'})," looks for a ",(0,r.jsx)(n.code,{children:"REDIS_URL"})," environment variable"]}),"\n",(0,r.jsx)(n.li,{children:"If it finds one, it uses that value"}),"\n",(0,r.jsxs)(n.li,{children:["If it doesn't find one, it uses the default: ",(0,r.jsx)(n.code,{children:'"redis://localhost:6379"'})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why do we need this?"})," Different environments need different Redis servers:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Development"}),": Local Redis on your computer (",(0,r.jsx)(n.code,{children:"localhost:6379"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Production"}),": Cloud Redis service (like Redis Cloud, AWS ElastiCache)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing"}),": Separate test database"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Breaking down the URL:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"redis://"})," - The protocol (like ",(0,r.jsx)(n.code,{children:"http://"})," but for Redis)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"localhost"})," - The server address (your computer in development)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"6379"})," - The port number (Redis's standard port)"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Production example:"})," In production, your ",(0,r.jsx)(n.code,{children:"REDIS_URL"})," might look like:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"redis://username:password@redis-server.amazonaws.com:6379\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"r = redis.Redis.from_url(redis_url)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We create a Redis connection object using the URL we just configured"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"redis.Redis.from_url()"})," is a convenient method that parses the URL and creates the connection"]}),"\n",(0,r.jsxs)(n.li,{children:["We store this connection in a variable called ",(0,r.jsx)(n.code,{children:"r"})," (short and sweet!)"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why create a connection object?"})," This connection object (",(0,r.jsx)(n.code,{children:"r"}),") is our gateway to the Redis database. Every time we want to store or retrieve data, we'll use this object."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What happens behind the scenes?"})," The Redis library establishes a connection pool to the Redis server, handles authentication, and manages the network communication for us."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"cache-retrieval-function---getting-data-out",children:"Cache Retrieval Function - Getting Data Out"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def cache_get(key):\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's happening here?"})," We're defining a function called ",(0,r.jsx)(n.code,{children:"cache_get"})," that takes one parameter: ",(0,r.jsx)(n.code,{children:"key"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's a cache key?"})," A cache key is like a label on a storage box. In our case, we'll use city names as keys:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Key: ",(0,r.jsx)(n.code,{children:'"London"'})," \u2192 Value: ",(0,r.jsx)(n.code,{children:"{weather data for London}"})]}),"\n",(0,r.jsxs)(n.li,{children:["Key: ",(0,r.jsx)(n.code,{children:'"Paris"'})," \u2192 Value: ",(0,r.jsx)(n.code,{children:"{weather data for Paris}"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why create this function?"})," This function abstracts away the complexity of Redis operations. Instead of remembering Redis syntax everywhere, we just call ",(0,r.jsx)(n.code,{children:'cache_get("London")'}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"data = r.get(key)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We ask Redis to retrieve the data stored under the given key"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"r.get(key)"})," returns the stored value, or ",(0,r.jsx)(n.code,{children:"None"})," if the key doesn't exist"]}),"\n",(0,r.jsxs)(n.li,{children:["We store whatever we get back in the ",(0,r.jsx)(n.code,{children:"data"})," variable"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What format is the data in?"})," Redis returns data as bytes (binary data), not as a Python string or dictionary. That's why we need the next step..."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example:"})," If we call ",(0,r.jsx)(n.code,{children:'cache_get("London")'}),", this line asks Redis: \"Do you have anything stored under the key 'London'?\""]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"if data:\n    return json.loads(data)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We check if we actually got data back from Redis"}),"\n",(0,r.jsxs)(n.li,{children:["If we did, ",(0,r.jsx)(n.code,{children:"json.loads(data)"})," converts the JSON string back into a Python dictionary"]}),"\n",(0,r.jsx)(n.li,{children:"We return that dictionary to whoever called our function"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why json.loads()?"})," Remember, we stored Python dictionaries as JSON strings in Redis. Now we need to convert them back:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"What Redis gives us"}),": ",(0,r.jsx)(n.code,{children:'\'{"temperature": 15.2, "description": "Sunny"}\''})," (JSON string)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"What json.loads() returns"}),": ",(0,r.jsx)(n.code,{children:'{"temperature": 15.2, "description": "Sunny"}'})," (Python dict)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"The data flow:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Request"}),": ",(0,r.jsx)(n.code,{children:'cache_get("London")'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Redis returns"}),": JSON string of London's weather"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"json.loads() converts"}),": JSON string \u2192 Python dictionary"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"We return"}),": Usable Python weather data"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"return None\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's happening here?"})," If Redis didn't have any data for our key, we return ",(0,r.jsx)(n.code,{children:"None"}),' to indicate "no cached data found."']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why return None?"})," This is a clear signal to the calling code (in ",(0,r.jsx)(n.code,{children:"app.py"}),") that:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The data isn't cached"}),"\n",(0,r.jsx)(n.li,{children:"We need to fetch fresh data from the API"}),"\n",(0,r.jsx)(n.li,{children:"This is expected behavior, not an error"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"How app.py uses this:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"cached = cache_get(city)\nif cached:\n    # Use cached data\nelse:\n    # Fetch fresh data from API\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"cache-storage-function---putting-data-in",children:"Cache Storage Function - Putting Data In"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def cache_set(key, value, ex=43200):\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What's happening here?"})," We're defining a function called ",(0,r.jsx)(n.code,{children:"cache_set"})," that takes three parameters:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key"}),': The label for our data (like "London")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value"}),": The data to store (weather dictionary)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ex=43200"}),": Expiration time in seconds (default is 12 hours)"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why have an expiration time?"})," Weather data gets stale! We don't want to serve yesterday's weather. After 12 hours, Redis automatically deletes the cached data, forcing us to fetch fresh data."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why 43200 seconds?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"43200 seconds = 12 hours"}),"\n",(0,r.jsx)(n.li,{children:"Weather conditions can change throughout the day"}),"\n",(0,r.jsx)(n.li,{children:"12 hours is a good balance between performance and accuracy"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"r.set(key, json.dumps(value), ex=ex)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What's happening here?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"json.dumps(value)"})," converts our Python dictionary into a JSON string"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"r.set(key, ...)"})," stores the JSON string in Redis under the given key"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ex=ex"})," sets the expiration time"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Breaking it down:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Convert to JSON"}),": Python dict \u2192 JSON string (so Redis can store it)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Store in Redis"}),": Save the JSON string with the city name as the key"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set expiration"}),": Tell Redis to automatically delete this after ",(0,r.jsx)(n.code,{children:"ex"})," seconds"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example of what gets stored:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key"}),": ",(0,r.jsx)(n.code,{children:'"London"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Value"}),": ",(0,r.jsx)(n.code,{children:'\'{"temperature": 15.2, "humidity": 65, "description": "Partly cloudy"}\''})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Expires"}),": In 12 hours"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why json.dumps()?"})," Redis can only store strings, bytes, or numbers. Our weather data is a complex Python dictionary with nested objects. JSON is the perfect format to serialize (convert) complex data into a string that Redis can handle."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"how-these-functions-work-together",children:"How These Functions Work Together"}),"\n",(0,r.jsx)(n.p,{children:"Here's the complete caching flow in our weather API:"}),"\n",(0,r.jsx)(n.h3,{id:"when-a-user-requests-weather-data",children:"When a user requests weather data:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Check cache first"})," (in ",(0,r.jsx)(n.code,{children:"app.py"}),"):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'cached = cache_get("London")  # Look for London\'s weather\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"If cache hit"})," (data exists):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'if cached:\n    return jsonify({"source": "cache", "data": cached})\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Data is returned instantly (microseconds)"}),"\n",(0,r.jsx)(n.li,{children:"No API call needed"}),"\n",(0,r.jsx)(n.li,{children:"User gets fast response"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"If cache miss"})," (no data):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'data = get_weather("London")      # Fetch from API\ncache_set("London", data, ex=43200)  # Store for next time\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Fetch fresh data from Visual Crossing API"}),"\n",(0,r.jsx)(n.li,{children:"Store it in cache for 12 hours"}),"\n",(0,r.jsx)(n.li,{children:"Return data to user"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"the-beauty-of-this-system",children:"The beauty of this system:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"First request for London"}),": Slow (API call) but data gets cached"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Next requests for London"}),": Super fast (cache hit) for 12 hours"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"After 12 hours"}),": Cache expires, fresh data gets fetched automatically"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"performance-impact",children:"Performance Impact"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Without caching:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Every request = API call"}),"\n",(0,r.jsx)(n.li,{children:"Response time: 500-2000ms"}),"\n",(0,r.jsx)(n.li,{children:"API usage: High"}),"\n",(0,r.jsx)(n.li,{children:"User experience: Slow"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"With caching:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"First request = API call (500-2000ms)"}),"\n",(0,r.jsx)(n.li,{children:"Subsequent requests = Cache hit (1-10ms)"}),"\n",(0,r.jsx)(n.li,{children:"API usage: Reduced by 90%+"}),"\n",(0,r.jsx)(n.li,{children:"User experience: Lightning fast"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"real-world-cache-scenarios",children:"Real-World Cache Scenarios"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cache Hit Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"User 1: GET /weather?city=London (11:00 AM)\n\u2192 No cache, fetch from API, store in cache\n\u2192 Response time: 800ms\n\nUser 2: GET /weather?city=London (11:05 AM)  \n\u2192 Cache hit! Return cached data\n\u2192 Response time: 5ms\n\nUser 3: GET /weather?city=London (2:00 PM)\n\u2192 Cache hit! Same cached data\n\u2192 Response time: 5ms\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cache Expiration Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"User 1: GET /weather?city=Paris (9:00 AM)\n\u2192 Cache miss, fetch from API, cache expires at 9:00 PM\n\nUser 2: GET /weather?city=Paris (10:00 PM)\n\u2192 Cache expired, fetch fresh data, reset cache\n\u2192 New cache expires at 10:00 AM next day\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h1,{id:"conclusion-the-complete-system",children:"Conclusion: The Complete System"}),"\n",(0,r.jsx)(n.p,{children:"Your weather API demonstrates several important concepts for building production-ready applications:"}),"\n",(0,r.jsx)(n.h2,{id:"architecture-principles",children:"Architecture Principles"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Separation of Concerns"}),": Each file has a specific responsibility"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modularity"}),": Code is organized into reusable functions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security"}),": API keys stored in environment variables"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance"}),": Redis caching reduces response times and API costs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reliability"}),": Error handling and rate limiting protect the system"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"key-learning-outcomes",children:"Key Learning Outcomes"}),"\n",(0,r.jsx)(n.p,{children:"Students will understand:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"How to build REST APIs with Flask"}),"\n",(0,r.jsx)(n.li,{children:"External API integration patterns"}),"\n",(0,r.jsx)(n.li,{children:"Caching strategies and implementation"}),"\n",(0,r.jsx)(n.li,{children:"Environment-based configuration"}),"\n",(0,r.jsx)(n.li,{children:"Error handling and input validation"}),"\n",(0,r.jsx)(n.li,{children:"Rate limiting and API protection"}),"\n",(0,r.jsx)(n.li,{children:"Clean code organization and documentation"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This is an excellent example of modern web development best practices!"})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var i=s(6540);const r={},t=i.createContext(r);function c(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);