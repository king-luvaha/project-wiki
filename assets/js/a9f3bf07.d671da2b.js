"use strict";(self.webpackChunkproject_wiki=self.webpackChunkproject_wiki||[]).push([[5447],{416:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Task Tracker/Build a Simple Python CLI Task Tracker - Explained Line by Line","title":"Build a Simple Python CLI Task Tracker - Explained Line by Line","description":"Have you ever wanted to build a real-world Python project but didn\'t know where to start? In this post, I\'ll walk you through a Task Tracker CLI (Command-Line Interface) app written in Python. Not only will we build it, but we\'ll also break down how and why each part works - so you\'re not just copying code, but understanding it too.","source":"@site/docs/Task Tracker/Build a Simple Python CLI Task Tracker - Explained Line by Line.md","sourceDirName":"Task Tracker","slug":"/Task Tracker/Build a Simple Python CLI Task Tracker - Explained Line by Line","permalink":"/project-wiki/docs/Task Tracker/Build a Simple Python CLI Task Tracker - Explained Line by Line","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Task Tracker/Build a Simple Python CLI Task Tracker - Explained Line by Line.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Step by Step Guide to Build a Personal Blog with Node.js and EJS","permalink":"/project-wiki/docs/Personal Blog/Step by Step Guide to Build a Personal Blog with Node.js and EJS"},"next":{"title":"Step by Step Guide to Building a Python CLI Task Tracker","permalink":"/project-wiki/docs/Task Tracker/Step by Step Guide to Building a Python CLI Task Tracker"}}');var i=s(4848),a=s(8453);const l={},r=void 0,d={},c=[{value:"What You&#39;ll Build",id:"what-youll-build",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"**Setting Up the Projects",id:"setting-up-the-projects",level:3},{value:"Explanation:",id:"explanation",level:4},{value:"**Loading and Saving Tasks",id:"loading-and-saving-tasks",level:3},{value:"Explanation",id:"explanation-1",level:4},{value:"**Adding a Task",id:"adding-a-task",level:3},{value:"Explanation",id:"explanation-2",level:4},{value:"**Updating a Task",id:"updating-a-task",level:3},{value:"Step by Step Explanation",id:"step-by-step-explanation",level:4},{value:"**Deleting a Task",id:"deleting-a-task",level:3},{value:"Step by Step Explanation",id:"step-by-step-explanation-1",level:4},{value:"**Changing Task Status",id:"changing-task-status",level:3},{value:"Step by Step Explanation",id:"step-by-step-explanation-2",level:4},{value:"**Listing Tasks",id:"listing-tasks",level:3},{value:"Step by Step Explanation",id:"step-by-step-explanation-3",level:4},{value:"**Handling User Commands",id:"handling-user-commands",level:3},{value:"Step by Step Explanation",id:"step-by-step-explanation-4",level:4},{value:"Command Matching",id:"command-matching",level:4},{value:"Error Handling",id:"error-handling",level:4},{value:"Putting It All Together",id:"putting-it-all-together",level:4}];function o(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Have you ever wanted to build a real-world Python project but didn't know where to start? In this post, I'll walk you through a Task Tracker CLI (Command-Line Interface) app written in Python. Not only will we build it, but we'll also break down how and why each part works - so you're not just copying code, but understanding it too."}),"\n",(0,i.jsx)(n.p,{children:"Let's dive in:"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"what-youll-build",children:"What You'll Build"}),"\n",(0,i.jsx)(n.p,{children:"A task manager you can use directly from the terminal to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add tasks"}),"\n",(0,i.jsx)(n.li,{children:"Update them"}),"\n",(0,i.jsx)(n.li,{children:"Delete them"}),"\n",(0,i.jsx)(n.li,{children:"Mark them as in progress or done"}),"\n",(0,i.jsx)(n.li,{children:"List all tasks, or filter by status"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"And we'll do it all using Python + JSON - no databases or frameworks required."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,i.jsx)(n.p,{children:"You need Python installed on your machine. Once that is done"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Open VS Code or your preferred code editor."}),"\n",(0,i.jsx)(n.li,{children:"Create a new directory:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mkdir task-tracker\ncd task-tracker\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Set up a virtual environment (Optional but recommended)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python -m venv venv\n"})}),"\n",(0,i.jsx)(n.p,{children:"To activate it:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"On Windows:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"source venv/Scripts/activate\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"On Linux/macOS:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"source venv/bin/activate\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:["Create main python file.","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Inside VS Code, create the following file: ",(0,i.jsx)(n.code,{children:"task_cli.py"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Now, let's look under the hood \u2b07\ufe0f"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-the-projects",children:"**Setting Up the Projects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import sys\nimport json\nimport os\nfrom datetime import datetime\n"})}),"\n",(0,i.jsx)(n.h4,{id:"explanation",children:"Explanation:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sys"}),": Used to access command-line arguments (e.g., ",(0,i.jsx)(n.code,{children:'python task-cli.py add "Task description"'}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"json"}),": Handles saving and loading tasks to a file in JSON format, allowing persistent storage."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"os"}),": Helps check if the file exists (so the app doesn\u2019t crash when it runs the first time)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"datetime"}),": Used to timestamp when tasks are created or updated \u2014 gives the user context and tracking."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"loading-and-saving-tasks",children:"**Loading and Saving Tasks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"TASKS_FILE = 'tasks.json'\n\ndef load_tasks():\n    if not os.path.exists(TASKS_FILE):\n        return []\n    with open(TASKS_FILE, 'r') as f:\n        try:\n            return json.load(f)\n        except json.JSONDecodeError:\n            return []\n\ndef save_tasks(tasks):\n    with open(TASKS_FILE, 'w') as f:\n        json.dump(tasks, f, indent=2)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"explanation-1",children:"Explanation"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"TASKS_FILE = 'tasks.json'"})}),"\n",(0,i.jsxs)(n.p,{children:["To make the task tracker work even after the script exits, we need a way to ",(0,i.jsx)(n.strong,{children:"store data persistently"}),". That\u2019s what this part of the code handles \u2014 by saving tasks in a file called ",(0,i.jsx)(n.code,{children:"tasks.json"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This sets the filename where all tasks will be stored. We\u2019ll use this file to both ",(0,i.jsx)(n.strong,{children:"read"})," and ",(0,i.jsx)(n.strong,{children:"write"})," tasks.\nThink of this file like a mini-database."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"load_tasks()"})}),"\n",(0,i.jsxs)(n.p,{children:["This function ",(0,i.jsx)(n.strong,{children:"loads existing tasks"})," from ",(0,i.jsx)(n.code,{children:"tasks.json"})," whenever the program starts.\nHere\u2019s what it does step-by-step:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"with open(TASKS_FILE, 'r') as f:\n    try:\n        return json.load(f)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Opens the file in ",(0,i.jsxs)(n.strong,{children:["read mode (",(0,i.jsx)(n.code,{children:"'r'"}),")"]}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Uses ",(0,i.jsx)(n.code,{children:"json.load(f)"})," to ",(0,i.jsx)(n.strong,{children:"convert the JSON data back into Python objects"})," (a list of tasks)."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"except json.JSONDecodeError:\n    return []\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If the file exists but has invalid JSON (e.g., if someone accidentally edited it), it safely returns an empty list instead of crashing."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Why this matters: It makes the program fault-tolerant and user-friendly, especially for beginners who might mess with the JSON file manually."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"adding-a-task",children:"**Adding a Task"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def add_task(description):\n    tasks = load_tasks()\n    new_id = max([task['id'] for task in tasks], default=0) + 1\n    now = datetime.now().isoformat()\n    new_task = {\n        'id': new_id,\n        'description': description,\n        'status': 'todo',\n        'createdAt': now,\n        'updatedAt': now\n    }\n    tasks.append(new_task)\n    save_tasks(tasks)\n    print(f\"Task added successfully (id: {new_id})\")\n"})}),"\n",(0,i.jsx)(n.h4,{id:"explanation-2",children:"Explanation"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"add_task()"})," function is called when the user runs a command like:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'python task-cli.py add "Buy groceries"\n'})}),"\n",(0,i.jsx)(n.p,{children:"This is what adds a brand-new task to our to-do list.\nHere's a breakdown:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"tasks = load_tasks()\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Loads the existing list of tasks from ",(0,i.jsx)(n.code,{children:"tasks.json"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Ensures we don\u2019t overwrite previous tasks when we add a new one."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"new_id = max([task['id'] for task in tasks], default=0) + 1\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Extracts all existing task IDs."}),"\n",(0,i.jsxs)(n.li,{children:["Finds the ",(0,i.jsx)(n.strong,{children:"highest current ID"})," using ",(0,i.jsx)(n.code,{children:"max(...)"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Adds 1 to ensure the new task has a unique ID."}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"default=0"})," ensures it works even if the list is empty."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Why this works:"})," It auto-increments IDs like a real database would."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"now = datetime.now().isoformat()\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Captures the current date and time in ISO format."}),"\n",(0,i.jsx)(n.li,{children:"This will be used to timestamp the task\u2019s creation and last update."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Example output: ",(0,i.jsx)(n.code,{children:'"2025-06-16T13:14:45.123456"'})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"new_task = {\n    'id': new_id,\n    'description': description,\n    'status': 'todo',\n    'createdAt': now,\n    'updatedAt': now\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Creates a dictionary (a single task object)."}),"\n",(0,i.jsxs)(n.li,{children:["Includes","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"id"}),": Unique task ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"description"}),": The task text (e.g., \u201cBuy groceries\u201d)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"status"}),": Starts as ",(0,i.jsx)(n.code,{children:"'todo'"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"createdAt"})," & ",(0,i.jsx)(n.code,{children:"updatedAt"}),": Both set to now"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Why this matters:"})," This ensures every task is well-structured and timestamped for tracking."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"tasks.append(new_task)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Adds the new task to the existing list of tasks in memory."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"save_tasks(tasks)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Persists the updated task list to the ",(0,i.jsx)(n.code,{children:"tasks.json"})," file so it's not lost when the app closes."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print(f"Task added successfully (id: {new_id})")\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Gives user feedback in the CLI, confirming the task was added and showing the task ID."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"updating-a-task",children:"**Updating a Task"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def update_task(task_id, new_description):\n    tasks = load_tasks()\n    for task in tasks:\n        if task['id'] == task_id:\n            task['description'] = new_description\n            task['updatedAt'] = datetime.now().isoformat()\n            save_tasks(tasks)\n            print(f\"Task {task_id} updated successfully\")\n            return\n    print(f\"Task {task_id} not found\")\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes you need to ",(0,i.jsx)(n.strong,{children:"edit a task"})," after creating it \u2014 maybe you want to reword it or clarify it. This function lets the user do that by running a command like:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'python task-cli.py update 2 "Buy groceries and cook dinner"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"step-by-step-explanation",children:"Step by Step Explanation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"tasks = load_tasks()\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Load all existing tasks from the file so we can search through them."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"for task in tasks:\n    if task['id'] == task_id:\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Loop through each task."}),"\n",(0,i.jsx)(n.li,{children:"Check if the task's ID matches the one the user wants to update."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Why this works:"})," It ensures only the task with the exact matching ID gets updated."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"task['description'] = new_description\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Replaces the old description with the new one the user provided."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"task['updatedAt'] = datetime.now().isoformat()\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Updates the timestamp so users can see ",(0,i.jsx)(n.strong,{children:"when"})," the task was last modified."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This helps with task history and tracking changes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"save_tasks(tasks)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Saves the updated task list back to the file, including the newly edited description."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print(f"Task {task_id} updated successfully")\nreturn\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Lets the user know their update was successful and exits the function."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print(f"Task {task_id} not found")\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If no task matches the provided ID, it notifies the user."}),"\n",(0,i.jsx)(n.li,{children:"This is good for user feedback and debugging typos in task IDs."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"deleting-a-task",children:"**Deleting a Task"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def delete_task(task_id):\n    tasks = load_tasks()\n    for i, task in enumerate(tasks):\n        if task[\'id\'] == task_id:\n            del tasks[i]\n            save_tasks(tasks)\n            print(f"Task {task_id} deleted successfully")\n            return\n    print(f"Task {task_id} not found")\n'})}),"\n",(0,i.jsx)(n.p,{children:"This function allows the user to remove a task they no longer need using a command like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python task-cli.py delete 3\n"})}),"\n",(0,i.jsx)(n.p,{children:"Maybe the task is completed or was added by mistake \u2014 this function removes it from the list permanently."}),"\n",(0,i.jsx)(n.h4,{id:"step-by-step-explanation-1",children:"Step by Step Explanation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"tasks = load_tasks()\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Loads the current list of tasks from the ",(0,i.jsx)(n.code,{children:"tasks.json"})," file."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"for i, task in enumerate(tasks):\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Loops through all the tasks."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"enumerate()"})," gives both:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"i"}),": the index (position in the list)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"task"}),": the actual task dictionary"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Why ",(0,i.jsx)(n.code,{children:"enumerate"})," is useful here:"]})," To directly remove a task from the list using its index."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"if task['id'] == task_id:\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Checks if the current task matches the ID the user wants to delete."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"del tasks[i]\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Deletes the task from the list using its index."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Using ",(0,i.jsx)(n.code,{children:"del"})," is efficient and clean here \u2014 it removes the item without creating a new list."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"save_tasks(tasks)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Saves the updated task list to disk so the deleted task is permanently removed."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print(f"Task {task_id} deleted successfully")\nreturn\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Provides feedback that the task was deleted, and then exits the function."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print(f"Task {task_id} not found")\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If no task matches the given ID, the user is informed."}),"\n",(0,i.jsx)(n.li,{children:"This is helpful in case the user typed the wrong number or the task has already been deleted."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"changing-task-status",children:"**Changing Task Status"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def mark_task_status(task_id, status):\n    tasks = load_tasks()\n    for task in tasks:\n        if task['id'] == task_id:\n            task['status'] = status\n            task['updatedAt'] = datetime.now().isoformat()\n            save_tasks(tasks)\n            print(f\"Task {task_id} marked as {status}\")\n            return\n    print(f\"Task {task_id} not found\")\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Tasks evolve \u2014 they start as ideas (",(0,i.jsx)(n.code,{children:"todo"}),"), move to ",(0,i.jsx)(n.code,{children:"in-progress"}),", and eventually get ",(0,i.jsx)(n.code,{children:"done"}),". This function lets your app reflect that progress."]}),"\n",(0,i.jsx)(n.p,{children:"Users can run:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python task-cli.py mark-in-progress 2\n"})}),"\n",(0,i.jsx)(n.p,{children:"or"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python task-cli.py mark-done 2\n"})}),"\n",(0,i.jsx)(n.h4,{id:"step-by-step-explanation-2",children:"Step by Step Explanation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"tasks = load_tasks()\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Load the current list of tasks so we can find and modify the one we need."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"for task in tasks:\n    if task['id'] == task_id:\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Search through all tasks by comparing their ",(0,i.jsx)(n.code,{children:"id"})," to the user\u2019s input."]}),"\n",(0,i.jsx)(n.li,{children:"This ensures we're updating the right task."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"task['status'] = status\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Set the task\u2019s ",(0,i.jsx)(n.code,{children:"status"})," to the new value (e.g., ",(0,i.jsx)(n.code,{children:"'in-progress'"})," or ",(0,i.jsx)(n.code,{children:"'done'"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Why this is useful:"})," It allows the app to track the lifecycle of each task."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"task['updatedAt'] = datetime.now().isoformat()\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Update the ",(0,i.jsx)(n.code,{children:"updatedAt"})," timestamp so users know when the task was last changed."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Example: ",(0,i.jsx)(n.code,{children:'"2025-06-16T14:03:12.789654"'})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"save_tasks(tasks)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Save the modified task list so the status change persists after the program exits."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print(f"Task {task_id} marked as {status}")\nreturn\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Give the user confirmation that the status change was successful."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print(f"Task {task_id} not found")\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If the ID doesn\u2019t match any task, tell the user. This helps them correct mistakes like typing the wrong ID."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"listing-tasks",children:"**Listing Tasks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def list_tasks(status_filter=None):\n    tasks = load_tasks()\n    if status_filter:\n        filtered_tasks = [task for task in tasks if task['status'] == status_filter]\n        if not filtered_tasks:\n            print(f\"No tasks with status '{status_filter}' found\")\n            return\n        tasks = filtered_tasks\n    \n    for task in tasks:\n        print(f\"ID: {task['id']}\")\n        print(f\"Description: {task['description']}\")\n        print(f\"Status: {task['status']}\")\n        print(f\"Created: {task['createdAt']}\")\n        print(f\"Last Updated: {task['updatedAt']}\")\n        print(\"-\" * 30)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This function is used to ",(0,i.jsx)(n.strong,{children:"view tasks"}),". Users can list all tasks or only those that match a specific status:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python task-cli.py list\n"})}),"\n",(0,i.jsx)(n.p,{children:"or"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python task-cli.py list done\n"})}),"\n",(0,i.jsx)(n.h4,{id:"step-by-step-explanation-3",children:"Step by Step Explanation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"tasks = load_tasks()\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Load all saved tasks from the ",(0,i.jsx)(n.code,{children:"tasks.json"})," file."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"if status_filter:\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Check if the user passed a filter (like ",(0,i.jsx)(n.code,{children:"'done'"}),", ",(0,i.jsx)(n.code,{children:"'todo'"}),", or ",(0,i.jsx)(n.code,{children:"'in-progress'"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"If not, show all tasks."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"filtered_tasks = [task for task in tasks if task['status'] == status_filter]\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a list of tasks where ",(0,i.jsx)(n.code,{children:"task['status']"})," matches the filter."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This is a ",(0,i.jsx)(n.strong,{children:"list comprehension"}),", a Pythonic way to filter lists."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"if not filtered_tasks:\n    print(f\"No tasks with status '{status_filter}' found\")\n    return\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If the filtered list is empty, tell the user and stop."}),"\n",(0,i.jsx)(n.li,{children:"Prevents printing a blank list with no context."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"tasks = filtered_tasks\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Replace the full list with the filtered one, so the rest of the function prints only matching tasks."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"for task in tasks:\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Loop through the list of tasks (filtered or not) to display them."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print(f"ID: {task[\'id\']}")\nprint(f"Description: {task[\'description\']}")\nprint(f"Status: {task[\'status\']}")\nprint(f"Created: {task[\'createdAt\']}")\nprint(f"Last Updated: {task[\'updatedAt\']}")\nprint("-" * 30)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Show each task's details in a human-readable format."}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:'"\u2014" * 30'})," prints a divider for readability."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This helps users quickly scan through their tasks."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"handling-user-commands",children:"**Handling User Commands"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def print_usage():\n    print(\"Usage:\")\n    print(\"  task-cli add \\\"Task description\\\"\")\n    print(\"  task-cli update <task_id> \\\"New description\\\"\")\n    print(\"  task-cli delete <task_id>\")\n    print(\"  task-cli mark-in-progress <task_id>\")\n    print(\"  task-cli mark-done <task_id>\")\n    print(\"  task-cli list\")\n    print(\"  task-cli list todo|in-progress|done\")\n\ndef main():\n    if len(sys.argv) < 2:\n        print_usage()\n        return\n\n    command = sys.argv[1].lower()\n\n    if command == 'add' and len(sys.argv) >= 3:\n        description = ' '.join(sys.argv[2:])\n        add_task(description)\n    elif command == 'update' and len(sys.argv) >= 4:\n        try:\n            task_id = int(sys.argv[2])\n            new_description = ' '.join(sys.argv[3:])\n            update_task(task_id, new_description)\n        except ValueError:\n            print(\"Invalid task ID\")\n    elif command == 'delete' and len(sys.argv) == 3:\n        try:\n            task_id = int(sys.argv[2])\n            delete_task(task_id)\n        except ValueError:\n            print(\"Invalid task ID\")\n    elif command == 'mark-in-progress' and len(sys.argv) == 3:\n        try:\n            task_id = int(sys.argv[2])\n            mark_task_status(task_id, 'in-progress')\n        except ValueError:\n            print(\"Invalid task ID\")\n    elif command == 'mark-done' and len(sys.argv) == 3:\n        try:\n            task_id = int(sys.argv[2])\n            mark_task_status(task_id, 'done')\n        except ValueError:\n            print(\"Invalid task ID\")\n    elif command == 'list' and len(sys.argv) == 2:\n        list_tasks()\n    elif command == 'list' and len(sys.argv) == 3:\n        status_filter = sys.argv[2].lower()\n        if status_filter in ['todo', 'in-progress', 'done']:\n            list_tasks(status_filter)\n        else:\n            print(\"Invalid status filter. Use 'todo', 'in-progress', or 'done'\")\n    else:\n        print_usage()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This is the ",(0,i.jsx)(n.strong,{children:"brain"})," of your CLI app. It decides what action to perform based on user input."]}),"\n",(0,i.jsx)(n.h4,{id:"step-by-step-explanation-4",children:"Step by Step Explanation"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"print-usage"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def print_usage():\n    print("Usage:")\n    print("  task-cli add \\"Task description\\"")\n    print("  task-cli update <task_id> \\"New description\\"")\n    print("  task-cli delete <task_id>")\n    print("  task-cli mark-in-progress <task_id>")\n    print("  task-cli mark-done <task_id>")\n    print("  task-cli list")\n    print("  task-cli list todo|in-progress|done")\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Gives users a help guide when they enter the command incorrectly or don't know what to do."}),"\n",(0,i.jsx)(n.li,{children:"Super helpful for making your CLI-friendly."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"main()"})," - ",(0,i.jsx)(n.strong,{children:"Command Dispatcher"})]}),"\n",(0,i.jsxs)(n.p,{children:["This function uses ",(0,i.jsx)(n.code,{children:"sys.argv"})," to read arguments passed in the terminal."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"if len(sys.argv) < 2:\n    print_usage()\n    return\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If no command is provided, show the usage instructions."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"command-matching",children:"Command Matching"}),"\n",(0,i.jsxs)(n.p,{children:["Each ",(0,i.jsx)(n.code,{children:"elif"})," block matches a specific command and calls the appropriate function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"command = sys.argv[1].lower()\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"add"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"description = ' '.join(sys.argv[2:])\nadd_task(description)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Joins the rest of the input into one string, in case the task description has spaces."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"update"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"task_id = int(sys.argv[2])\nnew_description = ' '.join(sys.argv[3:])\nupdate_task(task_id, new_description)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Converts the second argument to an integer ID."}),"\n",(0,i.jsx)(n.li,{children:"Joins the rest into the new task description."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"delete"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"task_id = int(sys.argv[2])\ndelete_task(task_id)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Deletes a task by its ID."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"mark-in-progress/mark-done"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"mark_task_status(task_id, 'in-progress')\nmark_task_status(task_id, 'done')\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Updates the task's ",(0,i.jsx)(n.code,{children:"status"})," field."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"list"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"list_tasks()\nlist_tasks(status_filter)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Shows all tasks or only those matching a status filter like ",(0,i.jsx)(n.code,{children:"'todo'"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"Each command includes basic validation:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Checks for valid input length"}),"\n",(0,i.jsxs)(n.li,{children:["Handles invalid task IDs using ",(0,i.jsx)(n.code,{children:"try...except"})]}),"\n",(0,i.jsxs)(n.li,{children:["Defaults to ",(0,i.jsx)(n.code,{children:"print_usage()"})," for unknown commands"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"putting-it-all-together",children:"Putting It All Together"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"if __name__ == '__main__':\n    main()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This tells Python to run ",(0,i.jsx)(n.code,{children:"main()"})," ",(0,i.jsx)(n.strong,{children:"only when the script is executed directly"}),", not when it\u2019s imported as a module."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var t=s(6540);const i={},a=t.createContext(i);function l(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);