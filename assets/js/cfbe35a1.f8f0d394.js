"use strict";(self.webpackChunkproject_wiki=self.webpackChunkproject_wiki||[]).push([[6957],{3166:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Expense Tracker/Step by Step Guide to Building a Python Expense Tracker CLI","title":"Step by Step Guide to Building a Python Expense Tracker CLI","description":"In this tutorial, we\u2019ll build a command-line expense tracker using Python. This tool will help users log expenses, set budgets, and generate spending reports. By the end, you\u2019ll understand how to structure a CLI application, manage data persistence, and implement key financial tracking features.","source":"@site/docs/Expense Tracker/Step by Step Guide to Building a Python Expense Tracker CLI.md","sourceDirName":"Expense Tracker","slug":"/Expense Tracker/Step by Step Guide to Building a Python Expense Tracker CLI","permalink":"/project-wiki/docs/Expense Tracker/Step by Step Guide to Building a Python Expense Tracker CLI","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Expense Tracker/Step by Step Guide to Building a Python Expense Tracker CLI.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Expense Tracker CLI Application","permalink":"/project-wiki/docs/Expense Tracker/Expense Tracker CLI Application"},"next":{"title":"Build a GitHub User Activity CLI Application - Explained Line by Line","permalink":"/project-wiki/docs/GitHub User Activity/Build a GitHub User Activity CLI Application - Explained Line by Line"}}');var r=s(4848),i=s(8453);const d={},a=void 0,o={},l=[{value:"<strong>Step 1: Planning the Application</strong>",id:"step-1-planning-the-application",level:2},{value:"<strong>Core Features</strong>",id:"core-features",level:3},{value:"<strong>Data Storage</strong>",id:"data-storage",level:3},{value:"<strong>Tools &amp; Libraries</strong>",id:"tools--libraries",level:3},{value:"<strong>Step 2: Setting Up the Project</strong>",id:"step-2-setting-up-the-project",level:2},{value:"<strong>Why These Imports?</strong>",id:"why-these-imports",level:3},{value:"<strong>Step 3: Defining Data Storage</strong>",id:"step-3-defining-data-storage",level:2},{value:"<strong>Helper Functions to Load/Save Data</strong>",id:"helper-functions-to-loadsave-data",level:3},{value:"<strong>Why This Works</strong>",id:"why-this-works",level:3},{value:"<strong>Step 4: Adding Expenses</strong>",id:"step-4-adding-expenses",level:2},{value:"<strong>Function Definition</strong>",id:"function-definition",level:3},{value:"<strong>Key Points</strong>",id:"key-points",level:3},{value:"<strong>Step 5: Listing Expenses</strong>",id:"step-5-listing-expenses",level:2},{value:"<strong>Function Definition</strong>",id:"function-definition-1",level:3},{value:"<strong>Why This Works</strong>",id:"why-this-works-1",level:3},{value:"<strong>Step 6: Deleting &amp; Updating Expenses</strong>",id:"step-6-deleting--updating-expenses",level:2},{value:"<strong>Delete Function</strong>",id:"delete-function",level:3},{value:"<strong>Update Function</strong>",id:"update-function",level:3},{value:"<strong>Key Points</strong>",id:"key-points-1",level:3},{value:"<strong>Step 7: Budget Tracking &amp; Reports</strong>",id:"step-7-budget-tracking--reports",level:2},{value:"<strong>Set Budget Function</strong>",id:"set-budget-function",level:3},{value:"<strong>Summary Function</strong>",id:"summary-function",level:3},{value:"<strong>Key Features</strong>",id:"key-features",level:3},{value:"<strong>Step 8: Exporting &amp; Category Reports</strong>",id:"step-8-exporting--category-reports",level:2},{value:"<strong>Export to CSV</strong>",id:"export-to-csv",level:3},{value:"<strong>Category Summary</strong>",id:"category-summary",level:3},{value:"<strong>Why This Works</strong>",id:"why-this-works-2",level:3},{value:"<strong>Step 9: Building the CLI with <code>argparse</code></strong>",id:"step-9-building-the-cli-with-argparse",level:2},{value:"<strong>Key Takeaways</strong>",id:"key-takeaways",level:3},{value:"<strong>Final Thoughts</strong>",id:"final-thoughts",level:2},{value:"<strong>How to Run the Expense Tracker CLI: Complete Command Guide</strong>",id:"how-to-run-the-expense-tracker-cli-complete-command-guide",level:2},{value:"<strong>1. Adding an Expense</strong>",id:"1-adding-an-expense",level:3},{value:"<strong>2. Listing Expenses</strong>",id:"2-listing-expenses",level:3},{value:"<strong>3. Deleting an Expense</strong>",id:"3-deleting-an-expense",level:3},{value:"<strong>4. Updating an Expense</strong>",id:"4-updating-an-expense",level:3},{value:"<strong>5. Setting a Monthly Budget</strong>",id:"5-setting-a-monthly-budget",level:3},{value:"<strong>6. Viewing Summaries</strong>",id:"6-viewing-summaries",level:3},{value:"<strong>7. Category-wise Spending Breakdown</strong>",id:"7-category-wise-spending-breakdown",level:3},{value:"<strong>8. Exporting Expenses to CSV</strong>",id:"8-exporting-expenses-to-csv",level:3},{value:"<strong>Example Workflow</strong>",id:"example-workflow",level:3},{value:"<strong>Next Steps</strong>",id:"next-steps",level:3},{value:"**Detailed Step by Step Explanation",id:"detailed-step-by-step-explanation",level:3}];function p(e){const n={br:"br",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["In this tutorial, we\u2019ll build a ",(0,r.jsx)(n.strong,{children:"command-line expense tracker"})," using Python. This tool will help users log expenses, set budgets, and generate spending reports. By the end, you\u2019ll understand how to structure a CLI application, manage data persistence, and implement key financial tracking features."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-1-planning-the-application",children:(0,r.jsx)(n.strong,{children:"Step 1: Planning the Application"})}),"\n",(0,r.jsx)(n.p,{children:"Before writing code, let\u2019s outline what our expense tracker will do:"}),"\n",(0,r.jsx)(n.h3,{id:"core-features",children:(0,r.jsx)(n.strong,{children:"Core Features"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add Expenses"})," (description, amount, category, date)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"List Expenses"})," (filter by category)"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Delete/Update Expenses"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Set Monthly Budgets"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Generate Reports"})," (monthly summary, category-wise breakdown)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Export Data"})," (to CSV)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"data-storage",children:(0,r.jsx)(n.strong,{children:"Data Storage"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Expenses"}),": Stored in ",(0,r.jsx)(n.code,{children:"expenses.json"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Budgets"}),": Stored in ",(0,r.jsx)(n.code,{children:"budgets.json"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"tools--libraries",children:(0,r.jsx)(n.strong,{children:"Tools & Libraries"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"argparse"})," \u2013 For CLI argument parsing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"json"})," \u2013 For storing/loading data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"csv"})," \u2013 For exporting expenses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"datetime"})," \u2013 For tracking expense dates"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-2-setting-up-the-project",children:(0,r.jsx)(n.strong,{children:"Step 2: Setting Up the Project"})}),"\n",(0,r.jsxs)(n.p,{children:["Create a new Python file (",(0,r.jsx)(n.code,{children:"expense_tracker.py"}),") and start with the imports:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import argparse\nimport json\nimport os\nfrom datetime import datetime\nimport csv\nfrom collections import defaultdict\n"})}),"\n",(0,r.jsx)(n.h3,{id:"why-these-imports",children:(0,r.jsx)(n.strong,{children:"Why These Imports?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"argparse"})," \u2192 Handles command-line inputs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"json"})," \u2192 Saves/loads expenses in JSON format"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"os"})," \u2192 Checks if data files exist"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"datetime"})," \u2192 Automatically logs expense dates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"csv"})," \u2192 Exports data to CSV"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"defaultdict"})," \u2192 Helps with category-wise summaries"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-3-defining-data-storage",children:(0,r.jsx)(n.strong,{children:"Step 3: Defining Data Storage"})}),"\n",(0,r.jsx)(n.p,{children:"We need two files:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expenses.json"})," \u2192 Stores all expenses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"budgets.json"})," \u2192 Stores monthly budgets"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"helper-functions-to-loadsave-data",children:(0,r.jsx)(n.strong,{children:"Helper Functions to Load/Save Data"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'EXPENSES_FILE = "expenses.json"\nBUDGET_FILE = "budgets.json"\n\ndef load_expenses():\n    """Load expenses from file or return empty list if file doesn\'t exist"""\n    if os.path.exists(EXPENSES_FILE):\n        with open(EXPENSES_FILE, "r") as f:\n            return json.load(f)\n    return []\n\ndef save_expenses(expenses):\n    """Save expenses to file"""\n    with open(EXPENSES_FILE, "w") as f:\n        json.dump(expenses, f, indent=2)\n\ndef load_budgets():\n    """Load budgets from file or return empty dict if file doesn\'t exist"""\n    if os.path.exists(BUDGET_FILE):\n        with open(BUDGET_FILE, "r") as f:\n            return json.load(f)\n    return {}\n\ndef save_budgets(budgets):\n    """Save budgets to file"""\n    with open(BUDGET_FILE, "w") as f:\n        json.dump(budgets, f, indent=2)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"why-this-works",children:(0,r.jsx)(n.strong,{children:"Why This Works"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Checks if files exist before loading to avoid errors."}),"\n",(0,r.jsxs)(n.li,{children:["Returns empty structures (",(0,r.jsx)(n.code,{children:"[]"})," or ",(0,r.jsx)(n.code,{children:"{}"}),") if files don\u2019t exist yet."]}),"\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"json.dump()"})," with ",(0,r.jsx)(n.code,{children:"indent=2"})," for readable JSON files."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-4-adding-expenses",children:(0,r.jsx)(n.strong,{children:"Step 4: Adding Expenses"})}),"\n",(0,r.jsx)(n.h3,{id:"function-definition",children:(0,r.jsx)(n.strong,{children:"Function Definition"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def add_expense(args):\n    """Add a new expense"""\n    expenses = load_expenses()\n    \n    # Generate a new ID (1 + highest existing ID)\n    new_id = max([expense["id"] for expense in expenses] or [0]) + 1\n    \n    expense = {\n        "id": new_id,\n        "date": datetime.now().strftime("%Y-%m-%d"),  # Auto-log date\n        "description": args.description,\n        "amount": float(args.amount),\n        "category": args.category\n    }\n    \n    expenses.append(expense)\n    save_expenses(expenses)\n    \n    # Check if budget is exceeded\n    current_month = datetime.now().month\n    budgets = load_budgets()\n    \n    if str(current_month) in budgets:\n        monthly_expenses = sum(\n            float(e["amount"]) for e in expenses \n            if datetime.strptime(e["date"], "%Y-%m-%d").month == current_month\n        )\n        if monthly_expenses > float(budgets[str(current_month)]):\n            print(f"Warning: Budget exceeded! (Budget: ${budgets[str(current_month)]}, Spent: ${monthly_expenses})")\n    \n    print(f"Expense added (ID: {new_id})")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"key-points",children:(0,r.jsx)(n.strong,{children:"Key Points"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Auto-generates an ",(0,r.jsx)(n.code,{children:"id"})," for each expense."]}),"\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"datetime.now()"})," to log the current date."]}),"\n",(0,r.jsx)(n.li,{children:"Checks if the expense exceeds the monthly budget."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-5-listing-expenses",children:(0,r.jsx)(n.strong,{children:"Step 5: Listing Expenses"})}),"\n",(0,r.jsx)(n.h3,{id:"function-definition-1",children:(0,r.jsx)(n.strong,{children:"Function Definition"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def list_expenses(args):\n    \"\"\"List all expenses, optionally filtered by category\"\"\"\n    expenses = load_expenses()\n    \n    if not expenses:\n        print(\"No expenses found.\")\n        return\n    \n    if args.category:  # Filter by category if provided\n        expenses = [e for e in expenses if e[\"category\"] == args.category]\n        if not expenses:\n            print(f\"No expenses in category '{args.category}'.\")\n            return\n    \n    # Print formatted table\n    print(f\"{'ID':<5} {'Date':<12} {'Description':<20} {'Amount':<10} {'Category':<15}\")\n    print(\"-\" * 65)\n    for expense in expenses:\n        print(f\"{expense['id']:<5} {expense['date']:<12} {expense['description'][:18]:<20} ${expense['amount']:<9.2f} {expense['category'][:13]:<15}\")\n"})}),"\n",(0,r.jsx)(n.h3,{id:"why-this-works-1",children:(0,r.jsx)(n.strong,{children:"Why This Works"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses string formatting (",(0,r.jsx)(n.code,{children:":<10"}),") for aligned columns."]}),"\n",(0,r.jsxs)(n.li,{children:["Filters expenses if ",(0,r.jsx)(n.code,{children:"--category"})," is provided."]}),"\n",(0,r.jsx)(n.li,{children:"Handles empty expense lists gracefully."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-6-deleting--updating-expenses",children:(0,r.jsx)(n.strong,{children:"Step 6: Deleting & Updating Expenses"})}),"\n",(0,r.jsx)(n.h3,{id:"delete-function",children:(0,r.jsx)(n.strong,{children:"Delete Function"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def delete_expense(args):\n    """Delete an expense by ID"""\n    expenses = load_expenses()\n    \n    for i, expense in enumerate(expenses):\n        if expense["id"] == args.id:\n            del expenses[i]\n            save_expenses(expenses)\n            print("Expense deleted successfully")\n            return\n    \n    print(f"Error: Expense ID {args.id} not found.")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"update-function",children:(0,r.jsx)(n.strong,{children:"Update Function"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def update_expense(args):\n    """Update an existing expense"""\n    expenses = load_expenses()\n    \n    for expense in expenses:\n        if expense["id"] == args.id:\n            if args.description:\n                expense["description"] = args.description\n            if args.amount:\n                expense["amount"] = float(args.amount)\n            if args.category:\n                expense["category"] = args.category\n            save_expenses(expenses)\n            print("Expense updated successfully")\n            return\n    \n    print(f"Error: Expense ID {args.id} not found.")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"key-points-1",children:(0,r.jsx)(n.strong,{children:"Key Points"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Both functions search by ",(0,r.jsx)(n.code,{children:"id"})," and modify the JSON file."]}),"\n",(0,r.jsxs)(n.li,{children:["Only updates fields that are provided (",(0,r.jsx)(n.code,{children:"args.description"}),", ",(0,r.jsx)(n.code,{children:"args.amount"}),", etc.)."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-7-budget-tracking--reports",children:(0,r.jsx)(n.strong,{children:"Step 7: Budget Tracking & Reports"})}),"\n",(0,r.jsx)(n.h3,{id:"set-budget-function",children:(0,r.jsx)(n.strong,{children:"Set Budget Function"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def set_budget(args):\n    """Set budget for a specific month"""\n    budgets = load_budgets()\n    budgets[str(args.month)] = float(args.amount)\n    save_budgets(budgets)\n    month_name = datetime.strptime(f"2024-{args.month}-01", "%Y-%m-%d").strftime("%B")\n    print(f"Budget for {month_name} set to ${args.amount}")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"summary-function",children:(0,r.jsx)(n.strong,{children:"Summary Function"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def summary(args):\n    """Show summary of expenses, optionally for a specific month"""\n    expenses = load_expenses()\n    \n    if not expenses:\n        print("No expenses found.")\n        return\n    \n    if args.month:\n        month_expenses = [\n            float(e["amount"]) for e in expenses \n            if datetime.strptime(e["date"], "%Y-%m-%d").month == args.month\n        ]\n        total = sum(month_expenses)\n        month_name = datetime.strptime(f"2024-{args.month}-01", "%Y-%m-%d").strftime("%B")\n        print(f"Total expenses for {month_name}: ${total:.2f}")\n        \n        # Compare with budget\n        budgets = load_budgets()\n        if str(args.month) in budgets:\n            budget = float(budgets[str(args.month)])\n            print(f"Budget: ${budget:.2f}")\n            if total > budget:\n                print(f"Overspent by ${total - budget:.2f}")\n            else:\n                print(f"Remaining budget: ${budget - total:.2f}")\n    else:\n        total = sum(float(e["amount"]) for e in expenses)\n        print(f"Total expenses: ${total:.2f}")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"key-features",children:(0,r.jsx)(n.strong,{children:"Key Features"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Shows spending vs. budget."}),"\n",(0,r.jsx)(n.li,{children:"Handles both monthly and overall summaries."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-8-exporting--category-reports",children:(0,r.jsx)(n.strong,{children:"Step 8: Exporting & Category Reports"})}),"\n",(0,r.jsx)(n.h3,{id:"export-to-csv",children:(0,r.jsx)(n.strong,{children:"Export to CSV"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def export_to_csv(args):\n    """Export expenses to CSV"""\n    expenses = load_expenses()\n    if not expenses:\n        print("No expenses to export.")\n        return\n    \n    filename = args.filename or "expenses_export.csv"\n    \n    with open(filename, "w", newline="") as csvfile:\n        writer = csv.DictWriter(csvfile, fieldnames=["id", "date", "description", "amount", "category"])\n        writer.writeheader()\n        writer.writerows(expenses)\n    \n    print(f"Exported to {filename}")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"category-summary",children:(0,r.jsx)(n.strong,{children:"Category Summary"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def category_summary(args):\n    """Show expenses by category"""\n    expenses = load_expenses()\n    category_totals = defaultdict(float)\n    \n    for expense in expenses:\n        category_totals[expense["category"]] += float(expense["amount"])\n    \n    print("Expenses by Category:")\n    print("-" * 30)\n    for category, total in sorted(category_totals.items(), key=lambda x: x[1], reverse=True):\n        print(f"{category:<20}: ${total:.2f}")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"why-this-works-2",children:(0,r.jsx)(n.strong,{children:"Why This Works"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"csv.DictWriter"})," for clean CSV exports."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"defaultdict"})," simplifies category-wise summation."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-9-building-the-cli-with-argparse",children:(0,r.jsxs)(n.strong,{children:["Step 9: Building the CLI with ",(0,r.jsx)(n.code,{children:"argparse"})]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def main():\n    parser = argparse.ArgumentParser(description="Expense Tracker CLI")\n    subparsers = parser.add_subparsers(dest="command", required=True)\n    \n    # Add command\n    add_parser = subparsers.add_parser("add", help="Add a new expense")\n    add_parser.add_argument("--description", required=True, help="Expense description")\n    add_parser.add_argument("--amount", required=True, type=float, help="Expense amount")\n    add_parser.add_argument("--category", default="Uncategorized", help="Expense category")\n    add_parser.set_defaults(func=add_expense)\n    \n    # List command\n    list_parser = subparsers.add_parser("list", help="List expenses")\n    list_parser.add_argument("--category", help="Filter by category")\n    list_parser.set_defaults(func=list_expenses)\n    \n    # Delete command\n    delete_parser = subparsers.add_parser("delete", help="Delete an expense")\n    delete_parser.add_argument("--id", type=int, required=True, help="Expense ID to delete")\n    delete_parser.set_defaults(func=delete_expense)\n    \n    # Update command\n    update_parser = subparsers.add_parser("update", help="Update an expense")\n    update_parser.add_argument("--id", type=int, required=True, help="Expense ID to update")\n    update_parser.add_argument("--description", help="New description")\n    update_parser.add_argument("--amount", type=float, help="New amount")\n    update_parser.add_argument("--category", help="New category")\n    update_parser.set_defaults(func=update_expense)\n    \n    # Summary command\n    summary_parser = subparsers.add_parser("summary", help="Show summary")\n    summary_parser.add_argument("--month", type=int, choices=range(1, 13), help="Month (1-12)")\n    summary_parser.set_defaults(func=summary)\n    \n    # Budget command\n    budget_parser = subparsers.add_parser("set-budget", help="Set monthly budget")\n    budget_parser.add_argument("--month", type=int, choices=range(1, 13), required=True, help="Month (1-12)")\n    budget_parser.add_argument("--amount", type=float, required=True, help="Budget amount")\n    budget_parser.set_defaults(func=set_budget)\n    \n    # Export command\n    export_parser = subparsers.add_parser("export", help="Export to CSV")\n    export_parser.add_argument("--filename", help="Output filename (default: expenses_export.csv)")\n    export_parser.set_defaults(func=export_to_csv)\n    \n    # Category summary\n    category_parser = subparsers.add_parser("category-summary", help="Show category breakdown")\n    category_parser.set_defaults(func=category_summary)\n    \n    args = parser.parse_args()\n    args.func(args)\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"key-takeaways",children:(0,r.jsx)(n.strong,{children:"Key Takeaways"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"subparsers"})," for different commands (",(0,r.jsx)(n.code,{children:"add"}),", ",(0,r.jsx)(n.code,{children:"list"}),", ",(0,r.jsx)(n.code,{children:"delete"}),", etc.)."]}),"\n",(0,r.jsx)(n.li,{children:"Each subparser has its own arguments."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"set_defaults(func=...)"})," maps commands to their functions."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"final-thoughts",children:(0,r.jsx)(n.strong,{children:"Final Thoughts"})}),"\n",(0,r.jsxs)(n.p,{children:["This CLI tool:\n\u2714\ufe0f Tracks expenses & budgets",(0,r.jsx)(n.br,{}),"\n","\u2714\ufe0f Exports data to CSV",(0,r.jsx)(n.br,{}),"\n","\u2714\ufe0f Provides spending insights",(0,r.jsx)(n.br,{}),"\n","\u2714\ufe0f Is extensible (can add more features like charts, recurring expenses, etc.)"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"how-to-run-the-expense-tracker-cli-complete-command-guide",children:(0,r.jsx)(n.strong,{children:"How to Run the Expense Tracker CLI: Complete Command Guide"})}),"\n",(0,r.jsx)(n.p,{children:"Here's a full list of commands to use the expense tracker, covering all features:"}),"\n",(0,r.jsx)(n.h3,{id:"1-adding-an-expense",children:(0,r.jsx)(n.strong,{children:"1. Adding an Expense"})}),"\n",(0,r.jsx)(n.p,{children:'Log a new expense with description, amount, and category (default: "Uncategorized").'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'python expense_tracker.py add --description "Dinner" --amount 25.50 --category "Food"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:'(Category is optional; defaults to "Uncategorized")'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"2-listing-expenses",children:(0,r.jsx)(n.strong,{children:"2. Listing Expenses"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"List all expenses"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"python expense_tracker.py list\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:'Filter by category (e.g., "Food")'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'python expense_tracker.py list --category "Food"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"3-deleting-an-expense",children:(0,r.jsx)(n.strong,{children:"3. Deleting an Expense"})}),"\n",(0,r.jsxs)(n.p,{children:["Remove an expense by its ID (check ID from ",(0,r.jsx)(n.code,{children:"list"})," command)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"python expense_tracker.py delete --id 3\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"4-updating-an-expense",children:(0,r.jsx)(n.strong,{children:"4. Updating an Expense"})}),"\n",(0,r.jsx)(n.p,{children:"Modify an existing expense (update only provided fields)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'# Update description only\npython expense_tracker.py update --id 3 --description "Lunch with friends"\n\n# Update amount and category\npython expense_tracker.py update --id 3 --amount 30.00 --category "Dining"\n\n# Update all fields\npython expense_tracker.py update --id 3 --description "Uber Ride" --amount 15.75 --category "Transport"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"5-setting-a-monthly-budget",children:(0,r.jsx)(n.strong,{children:"5. Setting a Monthly Budget"})}),"\n",(0,r.jsxs)(n.p,{children:["Set a budget for a specific month (1-12, e.g., ",(0,r.jsx)(n.code,{children:"6"})," = June)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"python expense_tracker.py set-budget --month 6 --amount 1000\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"6-viewing-summaries",children:(0,r.jsx)(n.strong,{children:"6. Viewing Summaries"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Total expenses (all time)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"python expense_tracker.py summary\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Monthly summary (e.g., June)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"python expense_tracker.py summary --month 6\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Output includes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Total spending for the month"}),"\n",(0,r.jsx)(n.li,{children:"Budget comparison (if set)"}),"\n",(0,r.jsx)(n.li,{children:"Warnings if overspent"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"7-category-wise-spending-breakdown",children:(0,r.jsx)(n.strong,{children:"7. Category-wise Spending Breakdown"})}),"\n",(0,r.jsx)(n.p,{children:"See totals grouped by category (sorted highest to lowest)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"python expense_tracker.py category-summary\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Example output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Food               : $450.00  \nTransport          : $120.50  \nEntertainment      : $85.25  \nUncategorized      : $30.00  \n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"8-exporting-expenses-to-csv",children:(0,r.jsx)(n.strong,{children:"8. Exporting Expenses to CSV"})}),"\n",(0,r.jsxs)(n.p,{children:["Save all expenses to a CSV file (default: ",(0,r.jsx)(n.code,{children:"expenses_export.csv"}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'# Default filename\npython expense_tracker.py export\n\n# Custom filename\npython expense_tracker.py export --filename "my_expenses_june.csv"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"example-workflow",children:(0,r.jsx)(n.strong,{children:"Example Workflow"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Set a June budget"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"python expense_tracker.py set-budget --month 6 --amount 500\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Add expenses"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'python expense_tracker.py add --description "Groceries" --amount 75 --category "Food"\npython expense_tracker.py add --description "Gas" --amount 40 --category "Transport"\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Check spending vs. budget"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"python expense_tracker.py summary --month 6\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Export data"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'python expense_tracker.py export --filename "june_expenses.csv"\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"next-steps",children:(0,r.jsx)(n.strong,{children:"Next Steps"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Add a GUI (Tkinter, PyQt)"}),"\n",(0,r.jsx)(n.li,{children:"Integrate with banking APIs"}),"\n",(0,r.jsx)(n.li,{children:"Add data visualization (Matplotlib)"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"detailed-step-by-step-explanation",children:"**Detailed Step by Step Explanation"}),"\n",(0,r.jsx)(n.p,{children:"[[Build an Expense Tracker CLI Application - Explained Line by Line]]"})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>a});var t=s(6540);const r={},i=t.createContext(r);function d(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);