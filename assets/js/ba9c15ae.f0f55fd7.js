"use strict";(self.webpackChunkproject_wiki=self.webpackChunkproject_wiki||[]).push([[4360],{6507:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"To-Do List API/Todo List App Guide","title":"Todo List App Guide","description":"Here\u2019s a clear plan to build your CRUD To-do List RESTful API in Python, using FastAPI for performance and simplicity. This guide covers all required and bonus features.","source":"@site/docs/To-Do List API/Todo List App Guide.md","sourceDirName":"To-Do List API","slug":"/To-Do List API/Todo List App Guide","permalink":"/project-wiki/docs/To-Do List API/Todo List App Guide","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Todo List API","permalink":"/project-wiki/docs/To-Do List API/Todo List API"},"next":{"title":"Build a Unit Converter Web App - Explained Line by Line","permalink":"/project-wiki/docs/Unit Converter/Build a Unit Converter Web App - Explained Line by Line"}}');var r=s(4848),o=s(8453);const i={},d=void 0,a={},l=[{value:"\ud83d\udd27 Tech Stack",id:"-tech-stack",level:2},{value:"\ud83d\udcc1 Project Structure",id:"-project-structure",level:2},{value:"\u2705 Features Breakdown",id:"-features-breakdown",level:2},{value:"1. \ud83d\udd10 User Registration &amp; Authentication",id:"1--user-registration--authentication",level:3},{value:"2. \ud83d\udccb To-do CRUD Endpoints",id:"2--to-do-crud-endpoints",level:3},{value:"3. \ud83d\udd12 Authenticated Access Only",id:"3--authenticated-access-only",level:3},{value:"4. \u2705 Validation &amp; Error Handling",id:"4--validation--error-handling",level:3},{value:"5. \ud83d\udcc3 Pagination &amp; Filtering",id:"5--pagination--filtering",level:3},{value:"6. \ud83d\ude80 Bonus Features",id:"6--bonus-features",level:3},{value:"Step 0a: Create <code>.env</code> File",id:"step-0a-create-env-file",level:2},{value:"Step 0b: Create file for managing config:",id:"step-0b-create-file-for-managing-config",level:2},{value:"Step 1: Set up the base project and install dependencies",id:"step-1-set-up-the-base-project-and-install-dependencies",level:2},{value:"\ud83d\udcc1 Folder structure after Step 1",id:"-folder-structure-after-step-1",level:3},{value:"Step 2: <code>main.py</code>",id:"step-2-mainpy",level:2},{value:"<code>app/main.py</code>",id:"appmainpy",level:4},{value:"\u25b6\ufe0f Run the API",id:"\ufe0f-run-the-api",level:3},{value:"Step 3: Set Up Database Connection \u2013 <code>database.py</code>",id:"step-3-set-up-database-connection--databasepy",level:2},{value:"\ud83d\udcc1 Create <code>app/database.py</code>",id:"-create-appdatabasepy",level:3},{value:"\ud83d\udd01 Add DB Dependency for Routes \u2013 <code>dependencies.py</code>",id:"-add-db-dependency-for-routes--dependenciespy",level:3},{value:"Step 4: Create Models \u2013 <code>models.py</code>",id:"step-4-create-models--modelspy",level:2},{value:"\ud83d\udd0e Summary",id:"-summary",level:3},{value:"Step 5: Create Pydantic Schemas \u2013 <code>schemas.py</code>",id:"step-5-create-pydantic-schemas--schemaspy",level:2},{value:"\ud83d\udd0d Summary of Schemas",id:"-summary-of-schemas",level:3},{value:"Step 6: Authentication Logic \u2013 <code>auth.py</code>",id:"step-6-authentication-logic--authpy",level:2},{value:"\ud83d\udcc1 <code>app/auth.py</code>",id:"-appauthpy",level:3},{value:"\ud83d\udd10 Summary",id:"-summary-1",level:3},{value:"Step 7: User Routes \u2013 <code>routes/user.py</code>",id:"step-7-user-routes--routesuserpy",level:2},{value:"\ud83d\udcc4 <code>app/routes/user.py</code>",id:"-approutesuserpy",level:3},{value:"\u2705 Update <code>main.py</code> to Include Routes",id:"-update-mainpy-to-include-routes",level:3},{value:"Step 8: To-do Routes \u2013 <code>routes/todo.py</code>",id:"step-8-to-do-routes--routestodopy",level:2},{value:"\ud83d\udcc1 <code>app/routes/todo.py</code>",id:"-approutestodopy",level:3},{value:"\u2705 Update <code>main.py</code> to Include To-do Routes",id:"-update-mainpy-to-include-to-do-routes",level:3},{value:"\u2705 Test Authenticated Endpoints",id:"-test-authenticated-endpoints",level:3},{value:"Step 9: Postman Test",id:"step-9-postman-test",level:2},{value:"\ud83e\uddea Postman Collection Setup",id:"-postman-collection-setup",level:3},{value:"\ud83d\udd27 Base URL (if using Uvicorn locally):",id:"-base-url-if-using-uvicorn-locally",level:3},{value:"\u2705 1. Register New User",id:"-1-register-new-user",level:3},{value:"\u2705 2. Login to Get Access and Refresh Tokens",id:"-2-login-to-get-access-and-refresh-tokens",level:3},{value:"\u2705 3. Create a To-Do Item (Authenticated)",id:"-3-create-a-to-do-item-authenticated",level:3},{value:"\u2705 4. Get All To-Dos (Authenticated, Paginated)",id:"-4-get-all-to-dos-authenticated-paginated",level:3},{value:"\u2705 5. Filter To-Dos by Status",id:"-5-filter-to-dos-by-status",level:3},{value:"\u2705 6. Update a To-Do Item",id:"-6-update-a-to-do-item",level:3},{value:"\u2705 7. Delete a To-Do",id:"-7-delete-a-to-do",level:3},{value:"\u2705 8. Refresh Access Token",id:"-8-refresh-access-token",level:3},{value:"\u2705 9. Logout",id:"-9-logout",level:3},{value:"\u2705 10. Get Current User Profile",id:"-10-get-current-user-profile",level:3},{value:"\ud83e\uddea Recommended Postman Organization",id:"-recommended-postman-organization",level:3},{value:"\ud83d\udee0 Optional: Add Pre-Request Scripts",id:"-optional-add-pre-request-scripts",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Here\u2019s a clear plan to build your ",(0,r.jsx)(n.strong,{children:"CRUD To-do List RESTful API"})," in Python, using ",(0,r.jsx)(n.strong,{children:"FastAPI"})," for performance and simplicity. This guide covers all required and bonus features."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-tech-stack",children:"\ud83d\udd27 Tech Stack"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Python"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FastAPI"})," \u2013 Web framework"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SQLAlchemy"})," \u2013 ORM"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SQLite/PostgreSQL"})," \u2013 Database"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pydantic"})," \u2013 Data validation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"JWT (PyJWT)"})," \u2013 Token-based authentication"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Uvicorn"})," \u2013 ASGI server"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Alembic"})," \u2013 DB migrations (optional)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Redis"})," \u2013 (for rate limiting or caching, optional)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"pytest"})," \u2013 Unit testing"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-project-structure",children:"\ud83d\udcc1 Project Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"todo_api/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2502   \u251c\u2500\u2500 todo.py\n\u2502   \u2502   \u2514\u2500\u2500 user.py\n\u2502   \u251c\u2500\u2500 auth.py\n\u2502   \u251c\u2500\u2500 config.py\n\u2502   \u251c\u2500\u2500 database.py\n\u2502   \u251c\u2500\u2500 dependencies.py\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2514\u2500\u2500 schemas.py\n\u251c\u2500\u2500 venv/\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 /gitignore\n\u2514\u2500\u2500 todo.db\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-features-breakdown",children:"\u2705 Features Breakdown"}),"\n",(0,r.jsx)(n.h3,{id:"1--user-registration--authentication",children:"1. \ud83d\udd10 User Registration & Authentication"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/register"})," \u2013 Create a new user"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/login"})," \u2013 Return access & refresh JWTs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/refresh-token"})," \u2013 Generate new access token"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Security"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Password hashing (bcrypt)"}),"\n",(0,r.jsx)(n.li,{children:"JWT for access control"}),"\n",(0,r.jsx)(n.li,{children:"Token expiry, blacklisting (for logout if needed)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2--to-do-crud-endpoints",children:"2. \ud83d\udccb To-do CRUD Endpoints"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"POST /todos/"})," \u2013 Create task"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GET /todos/"})," \u2013 List (with pagination, filters)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GET /todos/{id}"})," \u2013 Retrieve"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"PUT /todos/{id}"})," \u2013 Update"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DELETE /todos/{id}"})," \u2013 Delete"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3--authenticated-access-only",children:"3. \ud83d\udd12 Authenticated Access Only"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["All ",(0,r.jsx)(n.code,{children:"/todos/*"})," endpoints protected by JWT"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4--validation--error-handling",children:"4. \u2705 Validation & Error Handling"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pydantic for strict request/response validation"}),"\n",(0,r.jsx)(n.li,{children:"Custom exception handlers for 401, 404, etc."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"5--pagination--filtering",children:"5. \ud83d\udcc3 Pagination & Filtering"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"GET /todos/?status=done&sort=created_at&limit=10&offset=0"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"6--bonus-features",children:"6. \ud83d\ude80 Bonus Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Unit Tests with ",(0,r.jsx)(n.code,{children:"pytest"})]}),"\n",(0,r.jsxs)(n.li,{children:["Rate limiting using a simple decorator or Redis (e.g., ",(0,r.jsx)(n.code,{children:"slowapi"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Refresh token mechanism with ",(0,r.jsx)(n.code,{children:"/refresh-token"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"step-0a-create-env-file",children:["Step 0a: Create ",(0,r.jsx)(n.code,{children:".env"})," File"]}),"\n",(0,r.jsxs)(n.p,{children:["Create a ",(0,r.jsx)(n.code,{children:".env"})," file in the project root:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# .env\n\n# JWT secrets\nSECRET_KEY=supersecretaccesskey\nREFRESH_SECRET_KEY=supersecretrefreshkey\nALGORITHM=HS256\n\n# Token expiry\nACCESS_TOKEN_EXPIRE_MINUTES=30\nREFRESH_TOKEN_EXPIRE_DAYS=7\n\n# Database URL\nDATABASE_URL=sqlite:///./todo.db\n\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-0b-create-file-for-managing-config",children:"Step 0b: Create file for managing config:"}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udcc4 ",(0,r.jsx)(n.code,{children:"app/config.py"})," \u2014 new file for managing config:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from pydantic_settings import BaseSettings\nfrom dotenv import load_dotenv\nimport os\n\n# \ud83d\udc47 Load the .env file from the correct path\nload_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), \'.env\'))\n\nclass Settings(BaseSettings):\n    SECRET_KEY: str\n    REFRESH_SECRET_KEY: str\n    ALGORITHM: str = "HS256"\n    ACCESS_TOKEN_EXPIRE_MINUTES: int\n    REFRESH_TOKEN_EXPIRE_DAYS: int\n    DATABASE_URL: str\n\n    class Config:\n        env_file = ".env" \xa0# Not required with load_dotenv but still good\n\nsettings = Settings()\n\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-1-set-up-the-base-project-and-install-dependencies",children:"Step 1: Set up the base project and install dependencies"}),"\n",(0,r.jsx)(n.p,{children:"Create a virtual environment and install the required packages:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python -m venv venv\nsource venv/bin/activate  # On Windows use: venv\\Scripts\\activate\n\npip install fastapi uvicorn sqlalchemy pydantic python-jose[cryptography] passlib[bcrypt] python-dotenv\npip install pydantic-settings\n pip install pydantic[email]  \n"})}),"\n",(0,r.jsx)(n.p,{children:"Optional (for testing, rate limiting, etc.):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install pytest httpx slowapi\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-folder-structure-after-step-1",children:"\ud83d\udcc1 Folder structure after Step 1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"todo_api/\n\u251c\u2500\u2500 app/\n\u2502   \u2514\u2500\u2500 main.py  \u2190 (we start here)\n\u251c\u2500\u2500 venv/\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 requirements.txt\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"step-2-mainpy",children:["Step 2: ",(0,r.jsx)(n.code,{children:"main.py"})]}),"\n",(0,r.jsx)(n.p,{children:"This is the entry point of your FastAPI app."}),"\n",(0,r.jsx)(n.h4,{id:"appmainpy",children:(0,r.jsx)(n.code,{children:"app/main.py"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI(title="To-Do List API")\n\n# CORS Middleware (if using frontend or testing from browser tools)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=["*"],  # For development only; restrict in production\n    allow_credentials=True,\n    allow_methods=["*"],\n    allow_headers=["*"],\n)\n\n@app.get("/")\ndef read_root():\n    return {"message": "Welcome to the To-Do List API!"}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-run-the-api",children:"\u25b6\ufe0f Run the API"}),"\n",(0,r.jsx)(n.p,{children:"To run the server:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"uvicorn app.main:app --reload\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then visit ",(0,r.jsx)(n.a,{href:"http://127.0.0.1:8000",children:"http://127.0.0.1:8000"})," \u2014 you'll see:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{"message": "Welcome to the To-Do List API!"}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Also try the built-in docs:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"http://127.0.0.1:8000/docs",children:"http://127.0.0.1:8000/docs"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"step-3-set-up-database-connection--databasepy",children:["Step 3: Set Up Database Connection \u2013 ",(0,r.jsx)(n.code,{children:"database.py"})]}),"\n",(0,r.jsxs)(n.p,{children:["We\u2019ll use ",(0,r.jsx)(n.strong,{children:"SQLAlchemy"})," and a ",(0,r.jsx)(n.strong,{children:"SQLite"})," database for simplicity (you can easily switch to PostgreSQL later)."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"-create-appdatabasepy",children:["\ud83d\udcc1 Create ",(0,r.jsx)(n.code,{children:"app/database.py"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\n# Use database URL from .env\nSQLALCHEMY_DATABASE_URL = settings.DATABASE_URL\n\n# SQLite requires this extra argument\nconnect_args = {"check_same_thread": False} if SQLALCHEMY_DATABASE_URL.startswith("sqlite") else {}\n\nengine = create_engine(\n\xa0 \xa0 SQLALCHEMY_DATABASE_URL,\n\xa0 \xa0 connect_args=connect_args\n)\n\nSessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)\n\nBase = declarative_base()\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"-add-db-dependency-for-routes--dependenciespy",children:["\ud83d\udd01 Add DB Dependency for Routes \u2013 ",(0,r.jsx)(n.code,{children:"dependencies.py"})]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udcc1 ",(0,r.jsx)(n.code,{children:"app/dependencies.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from app.database import SessionLocal\nfrom sqlalchemy.orm import Session\nfrom fastapi import Depends\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"step-4-create-models--modelspy",children:["Step 4: Create Models \u2013 ",(0,r.jsx)(n.code,{children:"models.py"})]}),"\n",(0,r.jsxs)(n.p,{children:["This file defines SQLAlchemy models for the ",(0,r.jsx)(n.code,{children:"User"})," and ",(0,r.jsx)(n.code,{children:"Todo"})," tables."]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udcc1 ",(0,r.jsx)(n.code,{children:"app/models.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Boolean\nfrom sqlalchemy.orm import relationship\nfrom app.database import Base\nfrom datetime import datetime, timedelta\n\nclass User(Base):\n    __tablename__ = "users"\n\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String(50), unique=True, nullable=False)\n    email = Column(String(100), unique=True, nullable=False)\n    hashed_password = Column(String(100), nullable=False)\n\n    todos = relationship("Todo", back_populates="owner")\n\nclass Todo(Base):\n    __tablename__ = "todos"\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    status = Column(String, default="not_done")\n    owner_id = Column(Integer, ForeignKey("users.id"))\n\n    owner = relationship("User", back_populates="todos")\n\nclass RefreshToken(Base):\n\xa0 \xa0 __tablename__ = "refresh_tokens"\n\n\xa0 \xa0 id = Column(Integer, primary_key=True, index=True)\n\xa0 \xa0 token = Column(String, unique=True, nullable=False)\n\xa0 \xa0 user_id = Column(Integer, ForeignKey("users.id"))\n\xa0 \xa0 expires_at = Column(DateTime, nullable=False)\n\xa0 \xa0 is_revoked = Column(Boolean, default=False)\n\n\xa0 \xa0 user = relationship("User", backref="refresh_tokens")\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-summary",children:"\ud83d\udd0e Summary"}),"\n",(0,r.jsx)(n.p,{children:"We now have:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"main.py"})," (entry point)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"database.py"})," (DB connection)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"models.py"})," (data models)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dependencies.py"})," (DB injection)"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"step-5-create-pydantic-schemas--schemaspy",children:["Step 5: Create Pydantic Schemas \u2013 ",(0,r.jsx)(n.code,{children:"schemas.py"})]}),"\n",(0,r.jsx)(n.p,{children:"These schemas define what data is expected in requests and what should be returned in responses."}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udcc1 ",(0,r.jsx)(n.code,{children:"app/schemas.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from pydantic import BaseModel, Field, EmailStr\nfrom typing import Optional, List\n\n# ----------- USER SCHEMAS -----------\n\nclass UserBase(BaseModel):\n\n\xa0 \xa0 username: str = Field(..., example="johndoe")\n\xa0 \xa0 email: EmailStr = Field(..., example="johndoe@example.com")\n\nclass UserCreate(UserBase):\n\xa0 \xa0 password: str = Field(..., min_length=6, example="strongpassword123")\n\nclass UserLogin(BaseModel):\n\xa0 \xa0 email: EmailStr = Field(..., example="user@example.com")\n\xa0 \xa0 password: str = Field(..., example="strongpassword123")\n\nclass UserOut(UserBase): \xa0# Inherits username and email\n\xa0 \xa0 id: int\n\n\xa0 \xa0 class Config:\n\xa0 \xa0 \xa0 \xa0 orm_mode = True\n\n\n# ----------- TODO SCHEMAS -----------\n\nclass TodoBase(BaseModel):\n\xa0 \xa0 title: str = Field(..., example="Buy groceries")\n\xa0 \xa0 description: Optional[str] = Field(None, example="Milk, Bread, Eggs")\n\xa0 \xa0 status: Optional[str] = Field("not_done", example="done")\n\nclass TodoCreate(TodoBase):\n    pass\n\nclass TodoUpdate(BaseModel):\n    title: Optional[str]\n    description: Optional[str]\n    status: Optional[str]\n\nclass TodoOut(TodoBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\n# ----------- TOKEN SCHEMAS -----------\n\nclass Token(BaseModel):\n    access_token: str\n    refresh_token: str\n    token_type: str\n\nclass TokenData(BaseModel):\n    username: Optional[str] = None\n\nclass RefreshTokenRequest(BaseModel):\n\xa0 \xa0 refresh_token: str\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-summary-of-schemas",children:"\ud83d\udd0d Summary of Schemas"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"UserCreate"})," \u2013 used for registration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"UserLogin"})," \u2013 used for login"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"UserOut"})," \u2013 used when returning user data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TodoCreate"})," \u2013 for creating todos"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TodoUpdate"})," \u2013 for partial updates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TodoOut"})," \u2013 for API response"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Token"})," / ",(0,r.jsx)(n.code,{children:"TokenData"})," \u2013 for JWT handling"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"step-6-authentication-logic--authpy",children:["Step 6: Authentication Logic \u2013 ",(0,r.jsx)(n.code,{children:"auth.py"})]}),"\n",(0,r.jsx)(n.p,{children:"This includes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Password hashing & verification with ",(0,r.jsx)(n.code,{children:"bcrypt"})]}),"\n",(0,r.jsxs)(n.li,{children:["JWT token creation and decoding with ",(0,r.jsx)(n.code,{children:"python-jose"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"-appauthpy",children:["\ud83d\udcc1 ",(0,r.jsx)(n.code,{children:"app/auth.py"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from datetime import datetime, timedelta\nfrom typing import Optional\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom fastapi import HTTPException, status, Depends\nfrom fastapi.security import OAuth2PasswordBearer\nfrom app import schemas, \nfrom app.config import settings\nfrom app.models import User\nfrom app.database import SessionLocal\nfrom sqlalchemy.orm import Session\nfrom app.dependencies import get_db\nimport uuid\n\n# SECRET and Algorithm for JWT\nSECRET_KEY = settings.SECRET_KEY\nALGORITHM = settings.ALGORITHM\nACCESS_TOKEN_EXPIRE_MINUTES = settings.ACCESS_TOKEN_EXPIRE_MINUTES\n\nREFRESH_SECRET_KEY = settings.REFRESH_SECRET_KEY\nREFRESH_TOKEN_EXPIRE_DAYS = settings.REFRESH_TOKEN_EXPIRE_DAYS\n\n# Password hashing context\npwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")\n\n# OAuth2 scheme (used in protected routes)\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="/login")\n\n\n# -------- Password Hashing -------- #\n\ndef hash_password(password: str) -> str:\n    return pwd_context.hash(password)\n\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\n\n\n# -------- JWT Token Handling -------- #\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n\n    to_encode.update({"exp": expire})\n    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n\ndef decode_access_token(token: str):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get("sub")\n        if username is None:\n            raise credentials_exception()\n        return schemas.TokenData(username=username)\n    except JWTError:\n        raise credentials_exception()\n\ndef credentials_exception():\n    return HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail="Could not validate credentials",\n        headers={"WWW-Authenticate": "Bearer"},\n    )\n\n\n# -------- Get Current User -------- #\n\ndef get_current_user(\n    token: str = Depends(oauth2_scheme),\n    db: Session = Depends(get_db)\n) -> User:\n    token_data = decode_access_token(token)\n    user = db.query(User).filter(User.username == token_data.username).first()\n    if not user:\n        raise credentials_exception()\n    return user\n\n# -------- Refresh Token Creation -------- #\n\ndef create_refresh_token(data: dict):\n\xa0 \xa0 expire = datetime.utcnow() + timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS)\n\xa0 \xa0 to_encode = data.copy()\n\xa0 \xa0 to_encode.update({"exp": expire})\n\xa0 \xa0 return jwt.encode(to_encode, REFRESH_SECRET_KEY, algorithm=ALGORITHM)\n\ndef decode_refresh_token(token: str):\n\xa0 \xa0 try:\n\xa0 \xa0 \xa0 \xa0 payload = jwt.decode(token, REFRESH_SECRET_KEY, algorithms=[ALGORITHM])\n\xa0 \xa0 \xa0 \xa0 username: str = payload.get("sub")\n\xa0 \xa0 \xa0 \xa0 if username is None:\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 raise credentials_exception()\n\xa0 \xa0 \xa0 \xa0 return schemas.TokenData(username=username)\n\xa0 \xa0 except JWTError:\n\xa0 \xa0 \xa0 \xa0 raise HTTPException(status_code=401, detail="Invalid refresh token")\n\ndef create_refresh_token_db(user: models.User, db: Session):\n\xa0 \xa0 raw_token = str(uuid.uuid4())\n\xa0 \xa0 encoded_token = jwt.encode({"sub": user.username}, REFRESH_SECRET_KEY, algorithm=ALGORITHM)\n\n\xa0 \xa0 expires_at = datetime.utcnow() + timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS)\n\xa0 \xa0 refresh_token = models.RefreshToken(\n\xa0 \xa0 \xa0 \xa0 token=encoded_token,\n\xa0 \xa0 \xa0 \xa0 user_id=user.id,\n\xa0 \xa0 \xa0 \xa0 expires_at=expires_at,\n\xa0 \xa0 \xa0 \xa0 is_revoked=False\n\xa0 \xa0 )\n\n\xa0 \xa0 db.add(refresh_token)\n\xa0 \xa0 db.commit()\n\xa0 \xa0 return encoded_token\n\ndef verify_refresh_token_db(token: str, db: Session):\n\xa0 \xa0 try:\n\xa0 \xa0 \xa0 \xa0 payload = jwt.decode(token, REFRESH_SECRET_KEY, algorithms=[ALGORITHM])\n\xa0 \xa0 \xa0 \xa0 username = payload.get("sub")\n\xa0 \xa0 except JWTError:\n\xa0 \xa0 \xa0 \xa0 raise HTTPException(status_code=401, detail="Invalid refresh token")\n\n\xa0 \xa0 token_entry = db.query(models.RefreshToken).filter(models.RefreshToken.token == token).first()\n\n\xa0 \xa0 if not token_entry or token_entry.is_revoked or token_entry.expires_at < datetime.utcnow():\n\xa0 \xa0 \xa0 \xa0 raise HTTPException(status_code=401, detail="Refresh token expired or revoked")\n\n\xa0 \xa0 return username\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-summary-1",children:"\ud83d\udd10 Summary"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hash_password()"})," & ",(0,r.jsx)(n.code,{children:"verify_password()"})," handle secure password storage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"create_access_token()"})," generates JWT tokens"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"decode_access_token()"})," validates and extracts user data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_current_user()"})," is a FastAPI dependency for protected routes"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"step-7-user-routes--routesuserpy",children:["Step 7: User Routes \u2013 ",(0,r.jsx)(n.code,{children:"routes/user.py"})]}),"\n",(0,r.jsx)(n.p,{children:"This includes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"POST /register"})})," \u2013 Create new user"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"POST /login"})})," \u2013 Authenticate and return JWT"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"-approutesuserpy",children:["\ud83d\udcc4 ",(0,r.jsx)(n.code,{children:"app/routes/user.py"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom fastapi.security import OAuth2PasswordRequestForm\n\nfrom app import schemas, models, auth\nfrom app.dependencies import get_db\n\nrouter = APIRouter(tags=["Users"])\n\n\n# -------- Register -------- #\n@router.post("/register", response_model=schemas.UserOut)\ndef register(user: schemas.UserCreate, db: Session = Depends(get_db)):\n\xa0 \xa0 existing_username = db.query(models.User).filter(models.User.username == user.username).first()\n\xa0 \xa0 existing_email = db.query(models.User).filter(models.User.email == user.email).first()\n\n\xa0 \xa0 if existing_username:\n\xa0 \xa0 \xa0 \xa0 raise HTTPException(status_code=400, detail="Username already exists")\n\xa0 \xa0 if existing_email:\n\xa0 \xa0 \xa0 \xa0 raise HTTPException(status_code=400, detail="Email already exists")\n\n\xa0 \xa0 hashed_password = auth.hash_password(user.password)\n\xa0 \xa0 new_user = models.User(\n\xa0 \xa0 \xa0 \xa0 username=user.username,\n\xa0 \xa0 \xa0 \xa0 email=user.email,\n\xa0 \xa0 \xa0 \xa0 hashed_password=hashed_password,\n\xa0 \xa0 )\n\n\xa0 \xa0 db.add(new_user)\n\xa0 \xa0 db.commit()\n\xa0 \xa0 db.refresh(new_user)\n\n\xa0 \xa0 return new_user\n\n# -------- Login -------- #\n@router.post("/login", response_model=schemas.Token)\ndef login(user_login: schemas.UserLogin, db: Session = Depends(get_db)):\n\xa0 \xa0 user = db.query(models.User).filter(models.User.email == user_login.email).first()\n\n\xa0 \xa0 if not user or not auth.verify_password(user_login.password, user.hashed_password):\n\xa0 \xa0 \xa0 \xa0 raise HTTPException(status_code=401, detail="Invalid credentials")\n\n\xa0 \xa0 access_token = auth.create_access_token(data={"sub": user.username})\n\xa0 \xa0 refresh_token = auth.create_refresh_token_db(user=user, db=db)\n\n\xa0 \xa0 return {\n\xa0 \xa0 \xa0 \xa0 "access_token": access_token,\n\xa0 \xa0 \xa0 \xa0 "refresh_token": refresh_token,\n\xa0 \xa0 \xa0 \xa0 "token_type": "bearer"\n\xa0 \xa0 }\n\n# --------- Refresh Token ----------#\n@router.post("/refresh-token", response_model=schemas.Token)\ndef refresh_token(req: schemas.RefreshTokenRequest, db: Session = Depends(get_db)):\n\xa0 \xa0 username = auth.verify_refresh_token_db(req.refresh_token, db)\n\xa0 \xa0 user = db.query(models.User).filter_by(username=username).first()\n\n\xa0 \xa0 if not user:\n\xa0 \xa0 \xa0 \xa0 raise HTTPException(status_code=401, detail="User not found")\n\n\xa0 \xa0 access_token = auth.create_access_token(data={"sub": username})\n\xa0 \xa0 new_refresh_token = auth.create_refresh_token_db(user=user, db=db)\n\n\xa0 \xa0 return {\n\xa0 \xa0 \xa0 \xa0 "access_token": access_token,\n\xa0 \xa0 \xa0 \xa0 "refresh_token": new_refresh_token,\n\xa0 \xa0 \xa0 \xa0 "token_type": "bearer"\n\xa0 \xa0 }\n\n# --------- Logout ----------#\n@router.post("/logout")\ndef logout(req: schemas.RefreshTokenRequest, db: Session = Depends(get_db)):\n\xa0 \xa0 token_entry = db.query(models.RefreshToken).filter_by(token=req.refresh_token).first()\n\n\xa0 \xa0 if not token_entry or token_entry.is_revoked:\n\xa0 \xa0 \xa0 \xa0 raise HTTPException(status_code=401, detail="Token already invalid or not found")\n\n\xa0 \xa0 token_entry.is_revoked = True\n\xa0 \xa0 db.commit()\n\n\xa0 \xa0 return {"detail": "Logged out successfully"}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"-update-mainpy-to-include-routes",children:["\u2705 Update ",(0,r.jsx)(n.code,{children:"main.py"})," to Include Routes"]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udcc4 ",(0,r.jsx)(n.code,{children:"app/main.py"})," (add imports & route registration):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from app.database import Base, engine\nfrom app.routes import user  # \ud83d\udc48 Import user routes\n\n# Create all tables\nBase.metadata.create_all(bind=engine)\n\n# Include routers\napp.include_router(user.router)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"step-8-to-do-routes--routestodopy",children:["Step 8: To-do Routes \u2013 ",(0,r.jsx)(n.code,{children:"routes/todo.py"})]}),"\n",(0,r.jsx)(n.p,{children:"This includes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"POST /todos/"})," \u2013 Create new to-do item"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GET /todos/"})," \u2013 List todos (with pagination, filters)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GET /todos/{id}"})," \u2013 Get specific todo"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"PUT /todos/{id}"})," \u2013 Update todo"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DELETE /todos/{id}"})," \u2013 Delete todo"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["All endpoints are ",(0,r.jsx)(n.strong,{children:"protected"}),": users must be authenticated via JWT."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"-approutestodopy",children:["\ud83d\udcc1 ",(0,r.jsx)(n.code,{children:"app/routes/todo.py"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import APIRouter, Depends, HTTPException, Query\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\n\nfrom app import models, schemas, auth\nfrom app.dependencies import get_db\n\nrouter = APIRouter(tags=["Todos"])\n\n\n# -------- CREATE -------- #\n@router.post("/todos/", response_model=schemas.TodoOut)\ndef create_todo(\n    todo: schemas.TodoCreate,\n    db: Session = Depends(get_db),\n    current_user: models.User = Depends(auth.get_current_user)\n):\n    new_todo = models.Todo(**todo.dict(), owner_id=current_user.id)\n    db.add(new_todo)\n    db.commit()\n    db.refresh(new_todo)\n    return new_todo\n\n\n# -------- LIST -------- #\n@router.get("/todos/", response_model=List[schemas.TodoOut])\ndef get_todos(\n    status: Optional[str] = Query(None),\n    sort: Optional[str] = Query("id"),\n    limit: int = Query(10, ge=1),\n    offset: int = Query(0, ge=0),\n    db: Session = Depends(get_db),\n    current_user: models.User = Depends(auth.get_current_user)\n):\n    query = db.query(models.Todo).filter(models.Todo.owner_id == current_user.id)\n\n    if status:\n        query = query.filter(models.Todo.status == status)\n\n    if sort in ["id", "title", "status"]:\n        query = query.order_by(getattr(models.Todo, sort))\n\n    return query.offset(offset).limit(limit).all()\n\n\n# -------- GET ONE -------- #\n@router.get("/todos/{todo_id}", response_model=schemas.TodoOut)\ndef get_todo(\n    todo_id: int,\n    db: Session = Depends(get_db),\n    current_user: models.User = Depends(auth.get_current_user)\n):\n    todo = db.query(models.Todo).filter_by(id=todo_id, owner_id=current_user.id).first()\n    if not todo:\n        raise HTTPException(status_code=404, detail="Todo not found")\n    return todo\n\n\n# -------- UPDATE -------- #\n@router.put("/todos/{todo_id}", response_model=schemas.TodoOut)\ndef update_todo(\n    todo_id: int,\n    updated_data: schemas.TodoUpdate,\n    db: Session = Depends(get_db),\n    current_user: models.User = Depends(auth.get_current_user)\n):\n    todo = db.query(models.Todo).filter_by(id=todo_id, owner_id=current_user.id).first()\n    if not todo:\n        raise HTTPException(status_code=404, detail="Todo not found")\n\n    for key, value in updated_data.dict(exclude_unset=True).items():\n        setattr(todo, key, value)\n\n    db.commit()\n    db.refresh(todo)\n    return todo\n\n\n# -------- DELETE -------- #\n@router.delete("/todos/{todo_id}")\ndef delete_todo(\n    todo_id: int,\n    db: Session = Depends(get_db),\n    current_user: models.User = Depends(auth.get_current_user)\n):\n    todo = db.query(models.Todo).filter_by(id=todo_id, owner_id=current_user.id).first()\n    if not todo:\n        raise HTTPException(status_code=404, detail="Todo not found")\n\n    db.delete(todo)\n    db.commit()\n    return {"detail": "Todo deleted"}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"-update-mainpy-to-include-to-do-routes",children:["\u2705 Update ",(0,r.jsx)(n.code,{children:"main.py"})," to Include To-do Routes"]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udcc4 ",(0,r.jsx)(n.code,{children:"app/main.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from app.routes import user, todo  # Add `todo`\n\n# Include routers\napp.include_router(user.router)\napp.include_router(todo.router)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-test-authenticated-endpoints",children:"\u2705 Test Authenticated Endpoints"}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"/login"})," endpoint to get a token, then test:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"POST /todos/"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"GET /todos/?status=done&limit=5&offset=0"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"PUT /todos/{id}"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"DELETE /todos/{id}"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["All should work with the JWT ",(0,r.jsx)(n.strong,{children:"Authorization"})," header:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"Authorization: Bearer your_token_here\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-9-postman-test",children:"Step 9: Postman Test"}),"\n",(0,r.jsxs)(n.p,{children:["Here's a complete, professional ",(0,r.jsx)(n.strong,{children:"Postman testing guide"})," for your FastAPI To-Do List API with:"]}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 User registration",(0,r.jsx)(n.br,{}),"\n","\u2705 Email-based login",(0,r.jsx)(n.br,{}),"\n","\u2705 JWT + Refresh tokens",(0,r.jsx)(n.br,{}),"\n","\u2705 Logout",(0,r.jsx)(n.br,{}),"\n","\u2705 CRUD for to-dos",(0,r.jsx)(n.br,{}),"\n","\u2705 Pagination, filtering, and protected routes"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-postman-collection-setup",children:"\ud83e\uddea Postman Collection Setup"}),"\n",(0,r.jsx)(n.h3,{id:"-base-url-if-using-uvicorn-locally",children:"\ud83d\udd27 Base URL (if using Uvicorn locally):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"http://127.0.0.1:8000\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-1-register-new-user",children:"\u2705 1. Register New User"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"POST"})," ",(0,r.jsx)(n.code,{children:"/register"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URL:"})," ",(0,r.jsx)(n.code,{children:"POST /register"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Headers:"})," ",(0,r.jsx)(n.code,{children:"Content-Type: application/json"})]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Body (raw JSON):"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "email": "testuser@example.com",\n  "username": "testuser",\n  "password": "password123"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Expected:"})," 201 Created",(0,r.jsx)(n.br,{}),"\n","\u2705 ",(0,r.jsx)(n.strong,{children:"Returns:"})," ",(0,r.jsx)(n.code,{children:'{ "id": 1, "email": "...", "username": "..." }'})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-2-login-to-get-access-and-refresh-tokens",children:"\u2705 2. Login to Get Access and Refresh Tokens"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"POST"})," ",(0,r.jsx)(n.code,{children:"/login"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Headers:"})," ",(0,r.jsx)(n.code,{children:"Content-Type: application/json"})]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Body:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "email": "testuser@example.com",\n  "password": "password123"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Returns:"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "access_token": "jwt...",\n  "refresh_token": "refresh.jwt...",\n  "token_type": "bearer"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udccc Save the ",(0,r.jsx)(n.code,{children:"access_token"})," and ",(0,r.jsx)(n.code,{children:"refresh_token"})," for use in next steps."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-3-create-a-to-do-item-authenticated",children:"\u2705 3. Create a To-Do Item (Authenticated)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"POST"})," ",(0,r.jsx)(n.code,{children:"/todos/"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Headers:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Authorization: Bearer <access_token>"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Content-Type: application/json"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Body:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "title": "Write Postman Guide",\n  "description": "Document all endpoints and testing steps",\n  "status": "not_done"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Returns:"})," To-do data with ",(0,r.jsx)(n.code,{children:"id"}),", ",(0,r.jsx)(n.code,{children:"title"}),", ",(0,r.jsx)(n.code,{children:"owner_id"}),", etc."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-4-get-all-to-dos-authenticated-paginated",children:"\u2705 4. Get All To-Dos (Authenticated, Paginated)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GET"})," ",(0,r.jsx)(n.code,{children:"/todos/?skip=0&limit=10"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Headers:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Authorization: Bearer <access_token>"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Returns:"})," A list of your todos",(0,r.jsx)(n.br,{}),"\n","\u2705 Supports pagination with ",(0,r.jsx)(n.code,{children:"skip"}),", ",(0,r.jsx)(n.code,{children:"limit"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-5-filter-to-dos-by-status",children:"\u2705 5. Filter To-Dos by Status"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GET"})," ",(0,r.jsx)(n.code,{children:"/todos/?status=done"}),(0,r.jsx)(n.br,{}),"\n","\u2705 Returns only done items"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-6-update-a-to-do-item",children:"\u2705 6. Update a To-Do Item"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"PUT"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/todos/{todo_id}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URL:"})," ",(0,r.jsx)(n.code,{children:"/todos/1"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Headers:"})," ",(0,r.jsx)(n.code,{children:"Authorization: Bearer <access_token>"})]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Body:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "title": "Write API Test Guide",\n  "status": "done"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u2705 Updates the title and status"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-7-delete-a-to-do",children:"\u2705 7. Delete a To-Do"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"DELETE"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/todos/{todo_id}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URL:"})," ",(0,r.jsx)(n.code,{children:"/todos/1"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Headers:"})," ",(0,r.jsx)(n.code,{children:"Authorization: Bearer <access_token>"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u2705 Returns 204 No Content"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-8-refresh-access-token",children:"\u2705 8. Refresh Access Token"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"POST"})," ",(0,r.jsx)(n.code,{children:"/token/refresh"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Body:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "refresh_token": "<your_refresh_token>"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsxs)(n.strong,{children:["Returns new ",(0,r.jsx)(n.code,{children:"access_token"})]})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Save and use this new ",(0,r.jsx)(n.code,{children:"access_token"})," for future requests."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-9-logout",children:"\u2705 9. Logout"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"POST"})," ",(0,r.jsx)(n.code,{children:"/logout"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Headers:"})," ",(0,r.jsx)(n.code,{children:"Authorization: Bearer <access_token>"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 Invalidates the refresh token stored in the DB (if implemented)",(0,r.jsx)(n.br,{}),"\n","\u2705 You\u2019ll need to log in again after logout"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-10-get-current-user-profile",children:"\u2705 10. Get Current User Profile"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GET"})," ",(0,r.jsx)(n.code,{children:"/users/me"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Headers:"})," ",(0,r.jsx)(n.code,{children:"Authorization: Bearer <access_token>"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u2705 Returns the currently authenticated user"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-recommended-postman-organization",children:"\ud83e\uddea Recommended Postman Organization"}),"\n",(0,r.jsx)(n.p,{children:"Create a collection like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\ud83d\udcc1 To-Do API Test Collection\n\u251c\u2500\u2500 \ud83d\udd10 Register\n\u251c\u2500\u2500 \ud83d\udd10 Login\n\u251c\u2500\u2500 \ud83d\udd01 Refresh Token\n\u251c\u2500\u2500 \u274c Logout\n\u251c\u2500\u2500 \ud83d\udcc4 Get Profile\n\u251c\u2500\u2500 \u2705 Create Todo\n\u251c\u2500\u2500 \ud83d\udcc3 Get Todos\n\u251c\u2500\u2500 \ud83d\udd0d Filter Todos\n\u251c\u2500\u2500 \u270f\ufe0f Update Todo\n\u2514\u2500\u2500 \u274c Delete Todo\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can ",(0,r.jsx)(n.strong,{children:"set access_token and refresh_token"})," as Postman environment variables to use in all requests automatically."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"-optional-add-pre-request-scripts",children:"\ud83d\udee0 Optional: Add Pre-Request Scripts"}),"\n",(0,r.jsx)(n.p,{children:"To auto-refresh tokens or set Authorization headers dynamically, use:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pre-request Script:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"pm.request.headers.add({\n  key: 'Authorization',\n  value: 'Bearer ' + pm.environment.get(\"access_token\")\n});\n"})}),"\n",(0,r.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>d});var t=s(6540);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);