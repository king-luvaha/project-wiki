"use strict";(self.webpackChunkproject_wiki=self.webpackChunkproject_wiki||[]).push([[7068],{2170:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"python-virtualenvwrapper-setup-guide","metadata":{"permalink":"/project-wiki/blog/python-virtualenvwrapper-setup-guide","source":"@site/blog/posts/Virtualenvwrapper-Setup-Guide.md","title":"\ud83d\udc0d How to Set Up `virtualenvwrapper` for Python Like a Pro","description":"---","date":"2025-07-10T12:26:24.000Z","tags":[{"inline":true,"label":"Python","permalink":"/project-wiki/blog/tags/python"},{"inline":true,"label":"python-tutorial","permalink":"/project-wiki/blog/tags/python-tutorial"},{"inline":true,"label":"virtualenv","permalink":"/project-wiki/blog/tags/virtualenv"},{"inline":true,"label":"virtualenvwrapper","permalink":"/project-wiki/blog/tags/virtualenvwrapper"},{"inline":true,"label":"developer-tools","permalink":"/project-wiki/blog/tags/developer-tools"}],"readingTime":2.06,"hasTruncateMarker":false,"authors":[{"name":"Ezra Luvaha","title":"Junior Developer","url":"https://portfolio-website-luvaha.vercel.app/","socials":{"linkedin":"https://www.linkedin.com/in/ezra-yeswa/","github":"https://github.com/king-luvaha"},"imageURL":"https://avatars.githubusercontent.com/u/163761408?v=4","key":"luvaha","page":null}],"frontMatter":{"slug":"python-virtualenvwrapper-setup-guide","title":"\ud83d\udc0d How to Set Up `virtualenvwrapper` for Python Like a Pro","authors":"luvaha","tags":["Python","python-tutorial","virtualenv","virtualenvwrapper","developer-tools"]},"unlisted":false,"nextItem":{"title":"\ud83c\udfae Building a 2D Platformer Game with a Custom Level Editor in Python","permalink":"/project-wiki/blog/building-2D-platformer-ninja-game"}},"content":"---\\n\\nWhether you\'re working on one Python project or ten, managing dependencies can get messy fast. This is where `virtualenvwrapper` comes in \u2014 a powerful tool that simplifies and supercharges virtual environment management in Python.\\n\\nIn this guide, you\'ll learn what it is, why it\u2019s helpful, and how to set it up in just a few steps.\\n\\n---\\n\\n## \ud83d\ude80 What Is `virtualenvwrapper`?\\n\\n`virtualenvwrapper` is a set of shell functions that make it easier to create, delete, and switch between virtual environments \u2014 all from one place.\\n\\nIt builds on top of `virtualenv` and gives you commands like:\\n\\n- `mkvirtualenv` \u2013 Create a new environment\\n- `workon` \u2013 Activate an environment\\n- `rmvirtualenv` \u2013 Remove an environment\\n- `lsvirtualenv` \u2013 List environments\\n\\nThese environments are stored in one central folder (e.g. `~/.virtualenvs`), keeping things clean and organized.\\n\\n---\\n\\n## \ud83d\udee0\ufe0f Prerequisites\\n\\nMake sure you have:\\n- Python 3 installed\\n- `pip` available\\n- A shell like `bash` or `zsh` (for Linux/macOS users)\\n\\n---\\n\\n## \ud83d\udc27 Setting Up on Linux/macOS\\n\\nYou can run this script in your terminal to install and configure everything:\\n\\n```bash\\n# Install virtualenv and virtualenvwrapper\\npip install --user virtualenv virtualenvwrapper\\n\\n# Define where your virtual environments will live\\nexport WORKON_HOME=$HOME/.virtualenvs\\n\\n# Add configuration to shell startup file\\nSHELL_RC=\\"$HOME/.bashrc\\"\\n[ -n \\"$ZSH_VERSION\\" ] && SHELL_RC=\\"$HOME/.zshrc\\"\\n\\n{\\n  echo \\"# virtualenvwrapper configuration\\"\\n  echo \\"export WORKON_HOME=\\\\$HOME/.virtualenvs\\"\\n  echo \\"export VIRTUALENVWRAPPER_PYTHON=$(which python3)\\"\\n  echo \\"source $(python3 -m site --user-base)/bin/virtualenvwrapper.sh\\"\\n} >> \\"$SHELL_RC\\"\\n\\n# Apply changes\\nsource \\"$SHELL_RC\\"\\n```\\n\\nThat\u2019s it! You\u2019re ready to start using `virtualenvwrapper`.\\n\\n---\\n\\n## \ud83e\ude9f Setting Up on Windows\\n\\nIf you\u2019re on Windows, install the wrapper using:\\n\\n```bash\\npip install virtualenvwrapper-win\\n```\\n\\nThere\u2019s no need to edit shell files \u2014 just use the following commands in **Command Prompt** or **PowerShell**:\\n\\n```bash\\nmkvirtualenv myenv\\nworkon myenv\\ndeactivate\\n```\\n\\nYour environments will be stored in:\\n\\n```\\n%USERPROFILE%\\\\Envs\\n```\\n\\n---\\n\\n## \ud83e\uddea Common Commands\\n\\n|Command|Description|\\n|---|---|\\n|`mkvirtualenv myenv`|Create a new virtual environment|\\n|`workon myenv`|Activate an existing environment|\\n|`deactivate`|Exit the current environment|\\n|`rmvirtualenv myenv`|Delete an environment|\\n|`lsvirtualenv`|List all environments|\\n|`cdvirtualenv`|Go to the environment folder|\\n|`cdsitepackages`|Go to site-packages of the current environment|\\n\\n---\\n\\n## \ud83e\udde0 Why Use `virtualenvwrapper`?\\n\\nHere\u2019s why it\u2019s worth using:\\n\\n- \ud83d\udd04 **Switch environments quickly** with `workon`\\n- \ud83e\uddf9 **Keep environments organized** in one directory\\n- \u2705 **No more remembering paths** \u2014 it handles it for you\\n- \ud83d\udcc1 **Centralized management** makes backups and cleanup easier\\n\\n---\\n\\n## \u2705 Final Thoughts\\n\\nUsing `virtualenvwrapper` is like having a personal assistant for your Python environments. Once you\'ve tried it, managing projects without it feels like going back to the Stone Age. Try it out and supercharge your workflow!\\n\\n---\\n\\n### \ud83d\udcac Have questions or tips?\\n\\nLeave a comment below or connect with me \u2014 let\u2019s learn together."},{"id":"building-2D-platformer-ninja-game","metadata":{"permalink":"/project-wiki/blog/building-2D-platformer-ninja-game","source":"@site/blog/posts/building-2D-platformer-ninja-game.md","title":"\ud83c\udfae Building a 2D Platformer Game with a Custom Level Editor in Python","description":"---","date":"2025-07-10T12:26:24.000Z","tags":[{"inline":true,"label":"Pygame","permalink":"/project-wiki/blog/tags/pygame"},{"inline":true,"label":"GameDev","permalink":"/project-wiki/blog/tags/game-dev"},{"inline":true,"label":"Python","permalink":"/project-wiki/blog/tags/python"},{"inline":true,"label":"2D","permalink":"/project-wiki/blog/tags/2-d"},{"inline":true,"label":"Ninja_Game","permalink":"/project-wiki/blog/tags/ninja-game"}],"readingTime":2.81,"hasTruncateMarker":false,"authors":[{"name":"Ezra Luvaha","title":"Junior Developer","url":"https://portfolio-website-luvaha.vercel.app/","socials":{"linkedin":"https://www.linkedin.com/in/ezra-yeswa/","github":"https://github.com/king-luvaha"},"imageURL":"https://avatars.githubusercontent.com/u/163761408?v=4","key":"luvaha","page":null}],"frontMatter":{"slug":"building-2D-platformer-ninja-game","title":"\ud83c\udfae Building a 2D Platformer Game with a Custom Level Editor in Python","authors":"luvaha","tags":["Pygame","GameDev","Python","2D","Ninja_Game"]},"unlisted":false,"prevItem":{"title":"\ud83d\udc0d How to Set Up `virtualenvwrapper` for Python Like a Pro","permalink":"/project-wiki/blog/python-virtualenvwrapper-setup-guide"},"nextItem":{"title":"Getting Started with Python","permalink":"/project-wiki/blog/getting-started-with-python"}},"content":"---\\n\\n## \u2728 Introduction\\n\\nEver dreamed of making your own 2D platformer game from scratch \u2014 one that includes **custom physics, enemies, particles, and even a level editor**? I did too. That\'s why I built **\\"Ninja Game\\"**, a pixel-art style platformer written entirely in Python using **Pygame**.\\n\\nIn this post, I\u2019ll walk you through how I designed and implemented a 2D platformer with an integrated **tile-based map editor**, sprite animation system, and basic AI \u2014 all while keeping the project organized and extensible.\\n\\n---\\n\\n## \ud83e\uddf1 Why I Built a Level Editor\\n\\nGame development is more than just jumping and shooting \u2014 it\u2019s about designing the world. So I built a **tilemap editor** that allows me to:\\n\\n- Place tiles from grouped assets (grass, stone, decor, etc.)\\n- Use scrollable canvas to design large levels\\n- Add enemies or decorations as \\"offgrid\\" tiles\\n- Save/load levels using JSON \\n\\n> \ud83d\udd01 The level editor also features mouse-wheel tile selection and simple `autotile` support for better visuals.\\n\\n---\\n\\n## \ud83d\ude80 Key Features\\n\\n### \u2705 Core Gameplay\\n\\n- Responsive platformer mechanics with double jump and wall slide  \\n- Dashing system that creates spark and particle trails   \\n- Enemies that patrol and shoot based on player distance  \\n\\n### \ud83e\udde0 Entities\\n\\n- **Player**: Dashing, jumping, wall sliding, and flipping \\n- **Enemy**: AI-based shooting behavior and knockback when hit\\n- **Particles**: For leaves, sparks, and hit effects\\n\\n### \ud83e\uddf0 Tools and Utilities\\n\\n- **`Animation` class** for smooth sprite transitions\\n- **`Tilemap` system** for both grid and off-grid objects\\n- **Asset loader** using `load_images()` and `load_image()` utilities \\n\\n---\\n\\n## \ud83d\uddfa\ufe0f Map Editing: Tips and Gotchas\\n\\nWhen working in `editor.py`, keep the following in mind:\\n\\n- **Offgrid Placement**: Objects like `decor`, `spawners`, or `enemy` must be placed **offgrid** using `G` key toggle. On-grid placement will crash the game during runtime.  \\n- **Player Spawn Point**: Manually place a `player` entity **offgrid** near the level\u2019s start. Otherwise, the player may respawn at the wrong location (like the death spot) after getting hit.\\n\\nThe editor is fully mouse-driven and supports save/load via the `O` key.\\n\\n---\\n\\n## \ud83d\udcc1 Folder Structure\\n\\n```\\nninja_game/\\n\u251c\u2500\u2500 data/\\n\u2502   \u251c\u2500\u2500 images/          # Sprites (player, enemy, tiles, etc.)\\n\u2502   \u251c\u2500\u2500 maps/            # JSON level files\\n\u2502   \u251c\u2500\u2500 sfx/             # Sound effects\\n\u2502   \u2514\u2500\u2500 music.wav        # Background music\\n\u251c\u2500\u2500 scripts/\\n\u2502   \u251c\u2500\u2500 clouds.py        # Parallax clouds system\\n\u2502   \u251c\u2500\u2500 entities.py      # PhysicsEntity, Player, Enemy\\n\u2502   \u251c\u2500\u2500 particle.py      # Particle rendering\\n\u2502   \u251c\u2500\u2500 spark.py         # Sparks from dashing and shooting\\n\u2502   \u251c\u2500\u2500 tilemap.py       # Map rendering and saving\\n\u2502   \u2514\u2500\u2500 utils.py         # Asset loading and animation\\n\u251c\u2500\u2500 editor.py            # Level editor (run separately)\\n\u251c\u2500\u2500 game.py              # Main game logic and loop\\n\u2514\u2500\u2500 map.json             # Default map file\\n```\\n\\n---\\n\\n## \ud83d\udd79\ufe0f Controls\\n\\n### In Game (`game.py`)\\n\\n- **A / D / W / S** \u2014 Move  \\n- **J** \u2014 Jump (with wall jump and double jump) \\n- **K** \u2014 Dash \\n- **ESC** \u2014 Quit \\n\\n### In Editor (`editor.py`)\\n\\n- **Mouse Left Click** \u2014 Place tile\\n- **Mouse Right Click** \u2014 Delete tile\\n- **Scroll Wheel** \u2014 Change tile group or variant\\n- **G** \u2014 Toggle ongrid / offgrid placement\\n- **O** \u2014 Save map to `map.json`\\n- **T** \u2014 Run `autotile()` for smoother edge tiles \\n\\n---\\n\\n## \ud83d\udd28 What I Learned\\n\\n- Handling collisions frame-by-frame using bounding rectangles\\n- Building reusable animation systems\\n- Managing parallax with varying cloud depths\\n- Designing for extensibility with asset-based organization\\n- JSON as a lightweight map format\\n\\n---\\n\\n## \ud83d\udce6 Future Improvements\\n\\n- Add GUI tile picker to the editor\\n- Camera shake during explosions\\n- Boss fights with multiple attack patterns\\n- Exporting maps to external game engines  \\n\\n---\\n\\n## \ud83d\udcac Final Thoughts\\n\\nThis project was a powerful learning experience in **game architecture, data-driven design, and asset management**. If you\'re looking to get into Python game development, Pygame is a great place to start.\\n\\nCheck out the full source code on GitHub:\\n\\n\ud83d\udc49 [**GitHub Repo: Ninja Game**](https://github.com/king-luvaha/ninja-game)\\n\\n---\\n\\n## \ud83d\udd17 Let\'s Connect\\n\\n- **GitHub**: [king-luvaha](https://github.com/king-luvaha)\\n- **Portfolio**: [Website](https://portfolio-website-luvaha.vercel.app/)\\n    \\n\\n---"},{"id":"getting-started-with-python","metadata":{"permalink":"/project-wiki/blog/getting-started-with-python","source":"@site/blog/posts/getting-started-with-python.md","title":"Getting Started with Python","description":"Python is one of the most popular and beginner-friendly programming languages in the world. It is widely used in web development, data science, automation, artificial intelligence, and more.","date":"2025-07-10T12:26:24.000Z","tags":[{"inline":false,"label":"Python","permalink":"/project-wiki/blog/tags/python","description":"Learn Python programming, tutorials, and tips"},{"inline":false,"label":"Beginner","permalink":"/project-wiki/blog/tags/beginner","description":"Content for beginner-level learners and programmers"},{"inline":false,"label":"Programming","permalink":"/project-wiki/blog/tags/programming","description":"Posts related to coding, software development, and engineering"}],"readingTime":1.29,"hasTruncateMarker":true,"authors":[{"name":"Ezra Luvaha","title":"Junior Developer","url":"https://portfolio-website-luvaha.vercel.app/","socials":{"linkedin":"https://www.linkedin.com/in/ezra-yeswa/","github":"https://github.com/king-luvaha"},"imageURL":"https://avatars.githubusercontent.com/u/163761408?v=4","key":"luvaha","page":null}],"frontMatter":{"slug":"getting-started-with-python","title":"Getting Started with Python","authors":"luvaha","tags":["python","beginner","programming"]},"unlisted":false,"prevItem":{"title":"\ud83c\udfae Building a 2D Platformer Game with a Custom Level Editor in Python","permalink":"/project-wiki/blog/building-2D-platformer-ninja-game"}},"content":"Python is one of the most popular and beginner-friendly programming languages in the world. It is widely used in web development, data science, automation, artificial intelligence, and more.\\n\\nIn this blog post, we\'ll explore what makes Python so powerful, why you should learn it, and how to get started writing your first Python program.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83d\ude80 Why Learn Python?\\n\\n- **Easy to Read and Write**: Python uses simple syntax similar to English.\\n- **Huge Community**: A massive community means lots of tutorials, libraries, and support.\\n- **Versatile**: Use it for web apps, AI, data analysis, games, automation, and more.\\n\\n## \ud83d\udee0\ufe0f Setting Up Python\\n\\n1. Download Python from the [official site](https://python.org).\\n2. Install an editor like VS Code or PyCharm.\\n3. Open your terminal or command prompt and type:\\n\\n```bash\\npython --version\\n````\\n\\nYou should see something like `Python 3.x.x`.\\n\\n## \u270d\ufe0f Your First Python Program\\n\\nCreate a new file called `hello.py` and add:\\n\\n```python\\nprint(\\"Hello, world!\\")\\n```\\n\\nThen run it in your terminal:\\n\\n```bash\\npython hello.py\\n```\\n\\nYou should see:\\n\\n```\\nHello, world!\\n```\\n\\n## \ud83d\udce6 Exploring Python Packages\\n\\nYou can install third-party libraries using `pip`, Python\u2019s package manager:\\n\\n```bash\\npip install requests\\n```\\n\\nThen use it in your code:\\n\\n```python\\nimport requests\\n\\nresponse = requests.get(\\"https://api.github.com\\")\\nprint(response.json())\\n```\\n\\n## \ud83e\udde0 Tips for Beginners\\n\\n- Practice small projects daily.\\n- Read other people\u2019s code.\\n- Ask questions on forums like Stack Overflow.\\n- Explore Python packages on [PyPI](https://pypi.org).\\n\\n## \ud83d\udcda Useful Resources\\n\\n- [Python Docs](https://docs.python.org/3/)\\n- [Real Python](https://realpython.com/)\\n- [Automate the Boring Stuff](https://automatetheboringstuff.com/)\\n\\n---\\n\\nHappy coding! Python is a great language to start your programming journey and build amazing things."}]}}')}}]);