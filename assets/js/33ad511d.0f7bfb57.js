"use strict";(self.webpackChunkproject_wiki=self.webpackChunkproject_wiki||[]).push([[8535],{2626:(n,s,e)=>{e.r(s),e.d(s,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"Task Tracker/Step by Step Guide to Building a Python CLI Task Tracker","title":"Step by Step Guide to Building a Python CLI Task Tracker","description":"In this tutorial, we\u2019ll build a Task Tracker CLI Application in Python that allows users to manage tasks from the command line. The app will support adding, updating, deleting, and tracking task statuses (todo, in-progress, done), with all data stored in a JSON file.","source":"@site/docs/Task Tracker/Step by Step Guide to Building a Python CLI Task Tracker.md","sourceDirName":"Task Tracker","slug":"/Task Tracker/Step by Step Guide to Building a Python CLI Task Tracker","permalink":"/project-wiki/docs/Task Tracker/Step by Step Guide to Building a Python CLI Task Tracker","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Build a Simple Python CLI Task Tracker - Explained Line by Line","permalink":"/project-wiki/docs/Task Tracker/Build a Simple Python CLI Task Tracker - Explained Line by Line"},"next":{"title":"Task Tracker CLI application","permalink":"/project-wiki/docs/Task Tracker/Task Tracker CLI application"}}');var i=e(4848),a=e(8453);const r={},d=void 0,l={},o=[{value:"<strong>Step 1: Planning the Application</strong>",id:"step-1-planning-the-application",level:2},{value:"<strong>Features:</strong>",id:"features",level:3},{value:"<strong>Task Structure (JSON Schema):</strong>",id:"task-structure-json-schema",level:3},{value:"<strong>Step 2: Setting Up the Project</strong>",id:"step-2-setting-up-the-project",level:2},{value:"<strong>Step 3: Core Functionality</strong>",id:"step-3-core-functionality",level:2},{value:"<strong>1. Loading and Saving Tasks</strong>",id:"1-loading-and-saving-tasks",level:3},{value:"<strong>2. Adding a Task</strong>",id:"2-adding-a-task",level:3},{value:"<strong>3. Updating a Task</strong>",id:"3-updating-a-task",level:3},{value:"<strong>4. Deleting a Task</strong>",id:"4-deleting-a-task",level:3},{value:"<strong>5. Changing Task Status</strong>",id:"5-changing-task-status",level:3},{value:"<strong>6. Listing Tasks</strong>",id:"6-listing-tasks",level:3},{value:"<strong>Step 4: Handling User Commands</strong>",id:"step-4-handling-user-commands",level:2},{value:"<strong>Step 5: Testing the Application</strong>",id:"step-5-testing-the-application",level:2},{value:"<strong>Conclusion</strong>",id:"conclusion",level:2},{value:"Detailed Step by Step Explanation",id:"detailed-step-by-step-explanation",level:2}];function c(n){const s={br:"br",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:["In this tutorial, we\u2019ll build a ",(0,i.jsx)(s.strong,{children:"Task Tracker CLI Application"})," in Python that allows users to manage tasks from the command line. The app will support adding, updating, deleting, and tracking task statuses (todo, in-progress, done), with all data stored in a JSON file."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"step-1-planning-the-application",children:(0,i.jsx)(s.strong,{children:"Step 1: Planning the Application"})}),"\n",(0,i.jsx)(s.p,{children:"Before writing code, let\u2019s outline the key features and structure:"}),"\n",(0,i.jsx)(s.h3,{id:"features",children:(0,i.jsx)(s.strong,{children:"Features:"})}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Add tasks"})," with descriptions."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Update"})," existing tasks."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Delete"})," tasks."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Mark tasks"})," as ",(0,i.jsx)(s.em,{children:"in-progress"})," or ",(0,i.jsx)(s.em,{children:"done"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"List tasks"})," (all or filtered by status)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Persistent storage"})," using JSON."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"task-structure-json-schema",children:(0,i.jsx)(s.strong,{children:"Task Structure (JSON Schema):"})}),"\n",(0,i.jsx)(s.p,{children:"Each task will have:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"id"})," (unique identifier)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"description"})," (task details)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"status"})," (",(0,i.jsx)(s.code,{children:"todo"}),", ",(0,i.jsx)(s.code,{children:"in-progress"}),", ",(0,i.jsx)(s.code,{children:"done"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"createdAt"})," (timestamp when created)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"updatedAt"})," (timestamp when last modified)"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"step-2-setting-up-the-project",children:(0,i.jsx)(s.strong,{children:"Step 2: Setting Up the Project"})}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Create a new Python file"})," (e.g., ",(0,i.jsx)(s.code,{children:"task_cli.py"}),")."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Import required modules"}),":","\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"import sys\nimport json\nimport os\nfrom datetime import datetime\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"step-3-core-functionality",children:(0,i.jsx)(s.strong,{children:"Step 3: Core Functionality"})}),"\n",(0,i.jsx)(s.h3,{id:"1-loading-and-saving-tasks",children:(0,i.jsx)(s.strong,{children:"1. Loading and Saving Tasks"})}),"\n",(0,i.jsx)(s.p,{children:"We need functions to:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Load tasks"})," from ",(0,i.jsx)(s.code,{children:"tasks.json"})," (or create it if missing)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Save tasks"})," back to the file."]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"TASKS_FILE = 'tasks.json'\n\ndef load_tasks():\n    if not os.path.exists(TASKS_FILE):\n        return []\n    with open(TASKS_FILE, 'r') as f:\n        try:\n            return json.load(f)\n        except json.JSONDecodeError:\n            return []\n\ndef save_tasks(tasks):\n    with open(TASKS_FILE, 'w') as f:\n        json.dump(tasks, f, indent=2)\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"2-adding-a-task",children:(0,i.jsx)(s.strong,{children:"2. Adding a Task"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Takes a ",(0,i.jsx)(s.strong,{children:"description"})," as input."]}),"\n",(0,i.jsxs)(s.li,{children:["Assigns a new ",(0,i.jsx)(s.strong,{children:"auto-incremented ID"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["Sets default status (",(0,i.jsx)(s.code,{children:"todo"}),") and timestamps."]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"def add_task(description):\n    tasks = load_tasks()\n    new_id = max([task['id'] for task in tasks], default=0) + 1\n    now = datetime.now().isoformat()\n    new_task = {\n        'id': new_id,\n        'description': description,\n        'status': 'todo',\n        'createdAt': now,\n        'updatedAt': now\n    }\n    tasks.append(new_task)\n    save_tasks(tasks)\n    print(f\"Task added successfully (id: {new_id})\")\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"3-updating-a-task",children:(0,i.jsx)(s.strong,{children:"3. Updating a Task"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Takes a ",(0,i.jsx)(s.strong,{children:"task ID"})," and ",(0,i.jsx)(s.strong,{children:"new description"}),"."]}),"\n",(0,i.jsx)(s.li,{children:"Updates the task if found."}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"def update_task(task_id, new_description):\n    tasks = load_tasks()\n    for task in tasks:\n        if task['id'] == task_id:\n            task['description'] = new_description\n            task['updatedAt'] = datetime.now().isoformat()\n            save_tasks(tasks)\n            print(f\"Task {task_id} updated successfully\")\n            return\n    print(f\"Task {task_id} not found\")\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"4-deleting-a-task",children:(0,i.jsx)(s.strong,{children:"4. Deleting a Task"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Removes a task by ",(0,i.jsx)(s.strong,{children:"ID"}),"."]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'def delete_task(task_id):\n    tasks = load_tasks()\n    for i, task in enumerate(tasks):\n        if task[\'id\'] == task_id:\n            del tasks[i]\n            save_tasks(tasks)\n            print(f"Task {task_id} deleted successfully")\n            return\n    print(f"Task {task_id} not found")\n'})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"5-changing-task-status",children:(0,i.jsx)(s.strong,{children:"5. Changing Task Status"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Marks tasks as ",(0,i.jsx)(s.strong,{children:"in-progress"})," or ",(0,i.jsx)(s.strong,{children:"done"}),"."]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"def mark_task_status(task_id, status):\n    tasks = load_tasks()\n    for task in tasks:\n        if task['id'] == task_id:\n            task['status'] = status\n            task['updatedAt'] = datetime.now().isoformat()\n            save_tasks(tasks)\n            print(f\"Task {task_id} marked as {status}\")\n            return\n    print(f\"Task {task_id} not found\")\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"6-listing-tasks",children:(0,i.jsx)(s.strong,{children:"6. Listing Tasks"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Lists all tasks or filters by status (",(0,i.jsx)(s.code,{children:"todo"}),", ",(0,i.jsx)(s.code,{children:"in-progress"}),", ",(0,i.jsx)(s.code,{children:"done"}),")."]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"def list_tasks(status_filter=None):\n    tasks = load_tasks()\n    if status_filter:\n        filtered_tasks = [task for task in tasks if task['status'] == status_filter]\n        if not filtered_tasks:\n            print(f\"No tasks with status '{status_filter}' found\")\n            return\n        tasks = filtered_tasks\n    \n    for task in tasks:\n        print(f\"ID: {task['id']}\")\n        print(f\"Description: {task['description']}\")\n        print(f\"Status: {task['status']}\")\n        print(f\"Created: {task['createdAt']}\")\n        print(f\"Last Updated: {task['updatedAt']}\")\n        print(\"-\" * 30)\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"step-4-handling-user-commands",children:(0,i.jsx)(s.strong,{children:"Step 4: Handling User Commands"})}),"\n",(0,i.jsx)(s.p,{children:"We\u2019ll parse command-line arguments to execute the right function."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"def print_usage():\n    print(\"Usage:\")\n    print(\"  task-cli add \\\"Task description\\\"\")\n    print(\"  task-cli update <task_id> \\\"New description\\\"\")\n    print(\"  task-cli delete <task_id>\")\n    print(\"  task-cli mark-in-progress <task_id>\")\n    print(\"  task-cli mark-done <task_id>\")\n    print(\"  task-cli list\")\n    print(\"  task-cli list todo|in-progress|done\")\n\ndef main():\n    if len(sys.argv) < 2:\n        print_usage()\n        return\n\n    command = sys.argv[1].lower()\n\n    if command == 'add' and len(sys.argv) >= 3:\n        description = ' '.join(sys.argv[2:])\n        add_task(description)\n    elif command == 'update' and len(sys.argv) >= 4:\n        try:\n            task_id = int(sys.argv[2])\n            new_description = ' '.join(sys.argv[3:])\n            update_task(task_id, new_description)\n        except ValueError:\n            print(\"Invalid task ID\")\n    elif command == 'delete' and len(sys.argv) == 3:\n        try:\n            task_id = int(sys.argv[2])\n            delete_task(task_id)\n        except ValueError:\n            print(\"Invalid task ID\")\n    elif command == 'mark-in-progress' and len(sys.argv) == 3:\n        try:\n            task_id = int(sys.argv[2])\n            mark_task_status(task_id, 'in-progress')\n        except ValueError:\n            print(\"Invalid task ID\")\n    elif command == 'mark-done' and len(sys.argv) == 3:\n        try:\n            task_id = int(sys.argv[2])\n            mark_task_status(task_id, 'done')\n        except ValueError:\n            print(\"Invalid task ID\")\n    elif command == 'list' and len(sys.argv) == 2:\n        list_tasks()\n    elif command == 'list' and len(sys.argv) == 3:\n        status_filter = sys.argv[2].lower()\n        if status_filter in ['todo', 'in-progress', 'done']:\n            list_tasks(status_filter)\n        else:\n            print(\"Invalid status filter. Use 'todo', 'in-progress', or 'done'\")\n    else:\n        print_usage()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"step-5-testing-the-application",children:(0,i.jsx)(s.strong,{children:"Step 5: Testing the Application"})}),"\n",(0,i.jsx)(s.p,{children:"Run commands like:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:'python task_cli.py add "Buy groceries"\npython task_cli.py update 1 "Buy milk and eggs"\npython task_cli.py mark-done 1\npython task_cli.py list done\n'})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"conclusion",children:(0,i.jsx)(s.strong,{children:"Conclusion"})}),"\n",(0,i.jsxs)(s.p,{children:["We\u2019ve built a ",(0,i.jsx)(s.strong,{children:"fully functional CLI Task Tracker"})," with:\n\u2714 ",(0,i.jsx)(s.strong,{children:"Add/Update/Delete"})," tasks",(0,i.jsx)(s.br,{}),"\n","\u2714 ",(0,i.jsx)(s.strong,{children:"Track status"})," (todo, in-progress, done)",(0,i.jsx)(s.br,{}),"\n","\u2714 ",(0,i.jsx)(s.strong,{children:"Persistent JSON storage"}),(0,i.jsx)(s.br,{}),"\n","\u2714 ",(0,i.jsx)(s.strong,{children:"Easy command-line usage"})]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"detailed-step-by-step-explanation",children:"Detailed Step by Step Explanation"}),"\n",(0,i.jsx)(s.p,{children:"[[Build a Simple Python CLI Task Tracker - Explained Line by Line]]"})]})}function p(n={}){const{wrapper:s}={...(0,a.R)(),...n.components};return s?(0,i.jsx)(s,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,s,e)=>{e.d(s,{R:()=>r,x:()=>d});var t=e(6540);const i={},a=t.createContext(i);function r(n){const s=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(s):{...s,...n}},[s,n])}function d(n){let s;return s=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),t.createElement(a.Provider,{value:s},n.children)}}}]);