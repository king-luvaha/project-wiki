"use strict";(self.webpackChunkproject_wiki=self.webpackChunkproject_wiki||[]).push([[6518],{4530:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"GitHub User Activity/Step by Step Guide to Building a GitHub User Activity","title":"Step by Step Guide to Building a GitHub User Activity","description":"Great! Here\'s a step-by-step guide you can use (or adapt) for your blog to teach your audience how to build the GitHub Activity Fetcher CLI app in Python from scratch. It\'s written in a way that walks beginners through each concept and builds their understanding as they go.","source":"@site/docs/GitHub User Activity/Step by Step Guide to Building a GitHub User Activity.md","sourceDirName":"GitHub User Activity","slug":"/GitHub User Activity/Step by Step Guide to Building a GitHub User Activity","permalink":"/project-wiki/docs/GitHub User Activity/Step by Step Guide to Building a GitHub User Activity","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"GitHub User activity Application","permalink":"/project-wiki/docs/GitHub User Activity/GitHub User activity Application"},"next":{"title":"Build a Markdown Note Taking App with Grammar Checking Using FastAPI Guide","permalink":"/project-wiki/docs/Markdown Note Taking App/Build a Markdown Note Taking App with Grammar Checking Using FastAPI Guide"}}');var r=n(4848),s=n(8453);const a={},o=void 0,l={},c=[{value:"\ud83d\ude80 Introduction",id:"-introduction",level:2},{value:"\ud83e\uddf1 Step 1: Set Up Your Environment",id:"-step-1-set-up-your-environment",level:2},{value:"\u2705 Requirements",id:"-requirements",level:3},{value:"\ud83d\udcc1 Step 2: Create the Project File",id:"-step-2-create-the-project-file",level:2},{value:"\ud83e\udde0 Step 3: Import the Required Modules",id:"-step-3-import-the-required-modules",level:2},{value:"\ud83c\udf10 Step 4: Fetch GitHub User Activity",id:"-step-4-fetch-github-user-activity",level:2},{value:"\ud83d\udd0e Step 5: Parse the Activity Data",id:"-step-5-parse-the-activity-data",level:2},{value:"\ud83d\udda5 Step 6: Display the Activity to the Terminal",id:"-step-6-display-the-activity-to-the-terminal",level:2},{value:"\ud83e\uddea Step 7: Add the <code>main()</code> Function",id:"-step-7-add-the-main-function",level:2},{value:"\ud83d\udd01 Step 8: Run the Script",id:"-step-8-run-the-script",level:2},{value:"\u2705 Example Output",id:"-example-output",level:2},{value:"\ud83e\udde0 What Your Readers Will Learn",id:"-what-your-readers-will-learn",level:2},{value:"Detailed Step by Step Explanation",id:"detailed-step-by-step-explanation",level:3}];function d(e){const t={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Great! Here's a ",(0,r.jsx)(t.strong,{children:"step-by-step guide"})," you can use (or adapt) for your blog to teach your audience how to build the ",(0,r.jsx)(t.strong,{children:"GitHub Activity Fetcher CLI app in Python"})," from scratch. It's written in a way that walks beginners through each concept and builds their understanding as they go."]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-introduction",children:"\ud83d\ude80 Introduction"}),"\n",(0,r.jsx)(t.p,{children:"In this tutorial, we\u2019ll create a command-line interface (CLI) tool in Python that fetches and displays a user\u2019s recent GitHub activity. This is a great mini project for practicing:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Working with APIs"}),"\n",(0,r.jsx)(t.li,{children:"Parsing JSON"}),"\n",(0,r.jsx)(t.li,{children:"Handling HTTP errors"}),"\n",(0,r.jsx)(t.li,{children:"Formatting data for terminal output"}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-step-1-set-up-your-environment",children:"\ud83e\uddf1 Step 1: Set Up Your Environment"}),"\n",(0,r.jsx)(t.h3,{id:"-requirements",children:"\u2705 Requirements"}),"\n",(0,r.jsx)(t.p,{children:"Make sure you have:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Python 3.x installed"}),"\n",(0,r.jsx)(t.li,{children:"Access to a terminal or command prompt"}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"requests"})," library installed"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["If you don\u2019t have ",(0,r.jsx)(t.code,{children:"requests"}),", install it via pip:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"pip install requests\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-step-2-create-the-project-file",children:"\ud83d\udcc1 Step 2: Create the Project File"}),"\n",(0,r.jsx)(t.p,{children:"Let\u2019s start by creating a new Python file."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"touch github_activity.py\n"})}),"\n",(0,r.jsx)(t.p,{children:"Then open it in your code editor (e.g., VS Code)."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-step-3-import-the-required-modules",children:"\ud83e\udde0 Step 3: Import the Required Modules"}),"\n",(0,r.jsx)(t.p,{children:"At the top of your file, add the imports. Each module serves a purpose:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"import sys\nimport requests\nimport json\nfrom datetime import datetime\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"sys"}),": to handle command-line arguments."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"requests"}),": to make HTTP requests to GitHub."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"json"}),": to work with the data returned from GitHub."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"datetime"}),": to make timestamps user-friendly."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-step-4-fetch-github-user-activity",children:"\ud83c\udf10 Step 4: Fetch GitHub User Activity"}),"\n",(0,r.jsx)(t.p,{children:"Now we\u2019ll write a function to get a user\u2019s activity using GitHub\u2019s public API."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'def fetch_user_activity(username):\n    url = f"https://api.github.com/users/{username}/events"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.HTTPError as http_err:\n        if response.status_code == 404:\n            print(f"Error: User \'{username}\' not found on GitHub.")\n        else:\n            print(f"HTTP error occurred: {http_err}")\n    except requests.exceptions.RequestException as err:\n        print(f"Error fetching data: {err}")\n    return None\n'})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["\ud83d\udd0d Tip: We use ",(0,r.jsx)(t.code,{children:".raise_for_status()"})," to automatically throw an error if something goes wrong (like a 404)."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-step-5-parse-the-activity-data",children:"\ud83d\udd0e Step 5: Parse the Activity Data"}),"\n",(0,r.jsx)(t.p,{children:"Let\u2019s convert the raw JSON into readable messages based on event types."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"def parse_activity(events):\n    if not events:\n        return []\n\n    activity_messages = []\n\n    for event in events:\n        event_type = event.get('type')\n        repo_name = event.get('repo', {}).get('name', 'unknown repository')\n        created_at = event.get('created_at', '')\n\n        try:\n            date_obj = datetime.strptime(created_at, \"%Y-%m-%dT%H:%M:%SZ\")\n            formatted_date = date_obj.strftime(\"%b %d, %Y at %H:%M\")\n        except (ValueError, TypeError):\n            formatted_date = \"an unknown time\"\n\n        payload = event.get('payload', {})\n\n        if event_type == \"PushEvent\":\n            commits = payload.get('commits', [])\n            commit_count = len(commits)\n            message = f\"Pushed {commit_count} commit{'s' if commit_count != 1 else ''} to {repo_name}\"\n\n        elif event_type == \"IssuesEvent\":\n            action = payload.get('action', 'did something')\n            title = payload.get('issue', {}).get('title', 'an issue')\n            message = f\"{action.capitalize()} issue '{title}' in {repo_name}\"\n\n        elif event_type == \"PullRequestEvent\":\n            action = payload.get('action', 'did something')\n            title = payload.get('pull_request', {}).get('title', 'a pull request')\n            message = f\"{action.capitalize()} pull request '{title}' in {repo_name}\"\n\n        elif event_type == \"WatchEvent\":\n            message = f\"Starred {repo_name}\"\n\n        elif event_type == \"ForkEvent\":\n            fork_url = payload.get('forkee', {}).get('html_url', 'a repository')\n            message = f\"Forked {repo_name} to {fork_url}\"\n\n        elif event_type == \"CreateEvent\":\n            ref_type = payload.get('ref_type', 'something')\n            message = f\"Created a {ref_type} in {repo_name}\"\n\n        else:\n            message = f\"Performed {event_type} on {repo_name}\"\n\n        activity_messages.append(f\"- {message} (on {formatted_date})\")\n\n    return activity_messages\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-step-6-display-the-activity-to-the-terminal",children:"\ud83d\udda5 Step 6: Display the Activity to the Terminal"}),"\n",(0,r.jsx)(t.p,{children:"Add a function to show the results in a clean format."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'def display_activity(username, activities):\n    if not activities:\n        print(f"No recent activity found for {username} or the account is private.")\n        return\n\n    print(f"\\nRecent activity for {username}:\\n")\n    for activity in activities[:10]:\n        print(activity)\n    print("\\n")\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsxs)(t.h2,{id:"-step-7-add-the-main-function",children:["\ud83e\uddea Step 7: Add the ",(0,r.jsx)(t.code,{children:"main()"})," Function"]}),"\n",(0,r.jsx)(t.p,{children:"This part ties everything together and handles command-line input."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'def main():\n    if len(sys.argv) != 2:\n        print("Usage: python github_activity.py <username>")\n        sys.exit(1)\n\n    username = sys.argv[1]\n    print(f"\\nFetching GitHub activity for {username}...\\n")\n\n    raw_activity = fetch_user_activity(username)\n    if raw_activity is None:\n        sys.exit(1)\n\n    parsed_activity = parse_activity(raw_activity)\n    display_activity(username, parsed_activity)\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-step-8-run-the-script",children:"\ud83d\udd01 Step 8: Run the Script"}),"\n",(0,r.jsx)(t.p,{children:"At the bottom of the file, add the standard Python entry point:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'if __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(t.p,{children:"Now you can run the script from your terminal like this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"python github_activity.py john-doe\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-example-output",children:"\u2705 Example Output"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Fetching GitHub activity for torvalds...\n\nRecent activity for torvalds:\n\n- Pushed 2 commits to torvalds/linux (on Jun 15, 2025 at 10:22)\n- Opened issue 'Fix page fault handling' in john-doe/linux (on Jun 14, 2025 at 14:30)\n...\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-what-your-readers-will-learn",children:"\ud83e\udde0 What Your Readers Will Learn"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"How to work with a public API"}),"\n",(0,r.jsx)(t.li,{children:"How to parse and format JSON responses"}),"\n",(0,r.jsx)(t.li,{children:"How to build CLI apps in Python"}),"\n",(0,r.jsx)(t.li,{children:"How to handle errors gracefully"}),"\n",(0,r.jsxs)(t.li,{children:["How to format data with ",(0,r.jsx)(t.code,{children:"datetime"})]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"detailed-step-by-step-explanation",children:"Detailed Step by Step Explanation"}),"\n",(0,r.jsx)(t.p,{children:"[[Build a GitHub User Activity CLI Application - Explained Line by Line]]"})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(6540);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);