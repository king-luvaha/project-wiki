"use strict";(self.webpackChunkproject_wiki=self.webpackChunkproject_wiki||[]).push([[1705],{4898:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"TMDB CLI Tool/TMDB CLI Application Setup Guide","title":"TMDB CLI Application Setup Guide","description":"Fetch and display popular, top-rated, now-playing, or upcoming movies right in your terminal using The Movie Database (TMDB) API.","source":"@site/docs/TMDB CLI Tool/TMDB CLI Application Setup Guide.md","sourceDirName":"TMDB CLI Tool","slug":"/TMDB CLI Tool/TMDB CLI Application Setup Guide","permalink":"/project-wiki/docs/TMDB CLI Tool/TMDB CLI Application Setup Guide","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Step by Step Guide to Build a Personal Blog with Node.js and EJS","permalink":"/project-wiki/docs/Personal Blog/Step by Step Guide to Build a Personal Blog with Node.js and EJS"},"next":{"title":"TMDB CLI Tool Task","permalink":"/project-wiki/docs/TMDB CLI Tool/TMDB CLI Tool Task"}}');var i=t(4848),s=t(8453);const o={},a=void 0,l={},c=[{value:"\u2705 Prerequisites",id:"-prerequisites",level:2},{value:"\ud83d\ude80 Step-by-Step Setup",id:"-step-by-step-setup",level:2},{value:"<strong>1. Create Your Project Folder</strong>",id:"1-create-your-project-folder",level:3},{value:"<strong>2. Set Up a Virtual Environment (Recommended)</strong>",id:"2-set-up-a-virtual-environment-recommended",level:3},{value:"<strong>3. Install Required Packages</strong>",id:"3-install-required-packages",level:3},{value:"<strong>4. Get Your TMDB API Key</strong>",id:"4-get-your-tmdb-api-key",level:3},{value:"<strong>5. Create the <code>.env</code> File</strong>",id:"5-create-the-env-file",level:3},{value:"<strong>6. Create the Python Script</strong>",id:"6-create-the-python-script",level:3},{value:"<strong>7. Run the Application</strong>",id:"7-run-the-application",level:3},{value:"\u2705 Optional Enhancements",id:"-optional-enhancements",level:2},{value:"\ud83c\udfaf Make It Executable with a Shortcut",id:"-make-it-executable-with-a-shortcut",level:3},{value:"\ud83d\udcc1 Final Project Structure",id:"-final-project-structure",level:2},{value:"\u2705 You&#39;re Done!",id:"-youre-done",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Fetch and display popular, top-rated, now-playing, or upcoming movies right in your terminal using The Movie Database (TMDB) API."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-prerequisites",children:"\u2705 Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Python 3.7+"}),"\n",(0,i.jsx)(n.li,{children:"A terminal or command prompt"}),"\n",(0,i.jsx)(n.li,{children:"Internet connection"}),"\n",(0,i.jsx)(n.li,{children:"A TMDB account and API key (free)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-step-by-step-setup",children:"\ud83d\ude80 Step-by-Step Setup"}),"\n",(0,i.jsx)(n.h3,{id:"1-create-your-project-folder",children:(0,i.jsx)(n.strong,{children:"1. Create Your Project Folder"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mkdir tmdb-cli\ncd tmdb-cli\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"2-set-up-a-virtual-environment-recommended",children:(0,i.jsx)(n.strong,{children:"2. Set Up a Virtual Environment (Recommended)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python -m venv venv\n"})}),"\n",(0,i.jsx)(n.p,{children:"Activate the virtual environment:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Windows"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"venv\\Scripts\\activate\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"macOS/Linux"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"source venv/bin/activate\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"3-install-required-packages",children:(0,i.jsx)(n.strong,{children:"3. Install Required Packages"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip install requests python-dotenv colorama tabulate\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"4-get-your-tmdb-api-key",children:(0,i.jsx)(n.strong,{children:"4. Get Your TMDB API Key"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Sign up at ",(0,i.jsx)(n.a,{href:"https://www.themoviedb.org/signup",children:"https://www.themoviedb.org/signup"})]}),"\n",(0,i.jsx)(n.li,{children:"Confirm your email and login"}),"\n",(0,i.jsxs)(n.li,{children:["Go to ",(0,i.jsx)(n.a,{href:"https://www.themoviedb.org/settings/api",children:"API settings"})]}),"\n",(0,i.jsxs)(n.li,{children:["Click ",(0,i.jsx)(n.strong,{children:"Create"})," under API Key (v3 auth)"]}),"\n",(0,i.jsxs)(n.li,{children:["Copy your ",(0,i.jsx)(n.strong,{children:"API Key (v3 auth)"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"5-create-the-env-file",children:(0,i.jsxs)(n.strong,{children:["5. Create the ",(0,i.jsx)(n.code,{children:".env"})," File"]})}),"\n",(0,i.jsxs)(n.p,{children:["In your project directory, create a ",(0,i.jsx)(n.code,{children:".env"})," file and paste your API key:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"TMDB_API_KEY=your_actual_api_key_here\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"6-create-the-python-script",children:(0,i.jsx)(n.strong,{children:"6. Create the Python Script"})}),"\n",(0,i.jsxs)(n.p,{children:["Create a file named ",(0,i.jsx)(n.code,{children:"tmdb_app.py"})," and paste the polished code below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import requests\nimport argparse\nimport os\nfrom dotenv import load_dotenv\nfrom colorama import init, Fore\nfrom tabulate import tabulate\n\ninit(autoreset=True) # Initialize coloroma\n\n# Load APIkey\nload_dotenv()\nAPI_KEY = os.getenv("TMDB_API_KEY") or "PASTE_YOUR_API_KEY_HERE"\n\nBASE_URL = "https://api.themoviedb.org/3/movie"\n\nMOVIE_TYPES = {\n    "playing": "now_playing",\n    "popular": "popular",\n    "top": "top_rated",\n    "upcoming": "upcoming"\n}\n\n# Core Function\ndef fetch_movies(movie_type: str):\n    if movie_type not in MOVIE_TYPES:\n        print(Fore.RED + f"\u274c Invalid type: \'{movie_type}\'. Must be one of {list(MOVIE_TYPES.keys())}")\n        return\n\n    url = f"{BASE_URL}/{MOVIE_TYPES[movie_type]}"\n    params = {\n        "api_key": API_KEY,\n        "language": "en-US",\n        "page": 1\n    }\n\n    response = requests.get(url, params=params)\n\n    if response.status_code != 200:\n        print(Fore.RED + f"\u274c Failed to fetch data: {response.status_code}")\n        return\n\n\tdata = response.json()\n    results = data.get("results", [])\n\n    if not results:\n        print(Fore.YELLOW + "\u26a0\ufe0f No movies found.")\n        return\n\n    print(f"\\n\ud83c\udfac {Fore.CYAN + movie_type.upper()} MOVIES\\n" + "=" * 60)\n\n    table_data = []\n    for i, movie in enumerate(results[:10], 1):\n        title = movie.get("title", "N/A")\n        rating = movie.get("vote_average", "N/A")\n        release = movie.get("release_date", "N/A")\n        table_data.append([f"{i}", title, release, f"{rating} \u2b50"])\n\n    headers = [Fore.YELLOW + "#", Fore.GREEN + "Title", Fore.MAGENTA + "Release Date", Fore.BLUE + "Rating"]\n    print(tabulate(table, headers=headers, tablefmt="fancy_grid"))\n\n# CLI Argument Parsing\ndef main():\n    parser = argparse.ArgumentParser(description="\ud83c\udfa5 TMDB CLI Movie Fetcher")\n    parser.add_argument("--type", required=True, help="Choose: playing, popular, top, upcoming")\n    args = parser.parse_args()\n    fetch_movies(args.type.lower())\n\n# Entry Point\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"7-run-the-application",children:(0,i.jsx)(n.strong,{children:"7. Run the Application"})}),"\n",(0,i.jsx)(n.p,{children:"Use this command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python tmdb_app.py --type popular\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Replace ",(0,i.jsx)(n.code,{children:"popular"})," with:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"playing"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"top"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"upcoming"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python tmdb_app.py --type top\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-optional-enhancements",children:"\u2705 Optional Enhancements"}),"\n",(0,i.jsx)(n.h3,{id:"-make-it-executable-with-a-shortcut",children:"\ud83c\udfaf Make It Executable with a Shortcut"}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:"tmdb-app.bat"})," file on Windows in the same folder:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bat",children:"@echo off\npython tmdb_app.py %*\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then just run:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"tmdb-app --type upcoming\n"})}),"\n",(0,i.jsx)(n.p,{children:"Or on UNIX:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"chmod +x tmdb_app.py\nmv tmdb_app.py /usr/local/bin/tmdb-app\ntmdb-app --type top\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-final-project-structure",children:"\ud83d\udcc1 Final Project Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"tmdb-cli/\n\u2502\n\u251c\u2500\u2500 venv/                  # Virtual environment\n\u251c\u2500\u2500 .env                   # Your API key\n\u251c\u2500\u2500 tmdb_app.py            # Main script\n\u2514\u2500\u2500 requirements.txt       # (Optional) for pip install\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To create ",(0,i.jsx)(n.code,{children:"requirements.txt"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip freeze > requirements.txt\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-youre-done",children:"\u2705 You're Done!"}),"\n",(0,i.jsx)(n.p,{children:"You now have a functional, stylish terminal-based movie browser!\nWould you like to add search-by-title or export-to-CSV next?"})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);