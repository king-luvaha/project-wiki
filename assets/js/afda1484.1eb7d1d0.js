"use strict";(self.webpackChunkproject_wiki=self.webpackChunkproject_wiki||[]).push([[7068],{2170:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"building-2D-platformer-ninja-game","metadata":{"permalink":"/project-wiki/blog/building-2D-platformer-ninja-game","source":"@site/blog/posts/building-2D-platformer-ninja-game.md","title":"\ud83c\udfae Building a 2D Platformer Game with a Custom Level Editor in Python","description":"---","date":"2025-07-23T13:20:59.000Z","tags":[{"inline":false,"label":"Pygame","permalink":"/project-wiki/blog/tags/pygame","description":"Game development using the Pygame library"},{"inline":false,"label":"Game Development","permalink":"/project-wiki/blog/tags/gamedev","description":"Tutorials and resources for building games"},{"inline":true,"label":"Python","permalink":"/project-wiki/blog/tags/python"},{"inline":false,"label":"2D Games","permalink":"/project-wiki/blog/tags/2d","description":"Side-scrollers, platformers, and other 2D games"},{"inline":false,"label":"Ninja Game","permalink":"/project-wiki/blog/tags/ninja-game","description":"Posts related to building ninja-themed platformers"}],"readingTime":2.82,"hasTruncateMarker":true,"authors":[{"name":"Ezra Luvaha","title":"Junior Developer","url":"https://portfolio-website-luvaha.vercel.app/","socials":{"linkedin":"https://www.linkedin.com/in/ezra-yeswa/","github":"https://github.com/king-luvaha"},"imageURL":"https://avatars.githubusercontent.com/u/163761408?v=4","key":"luvaha","page":null}],"frontMatter":{"slug":"building-2D-platformer-ninja-game","title":"\ud83c\udfae Building a 2D Platformer Game with a Custom Level Editor in Python","authors":"luvaha","tags":["Pygame","GameDev","Python","2D","Ninja_Game"]},"unlisted":false,"nextItem":{"title":"7 Python Web Development Frameworks for Data Scientists","permalink":"/project-wiki/blog/7-python-web-development-frameworks-for-data-scientists"}},"content":"---\\n\\n## \u2728 Introduction\\n\\nEver dreamed of making your own 2D platformer game from scratch \u2014 one that includes **custom physics, enemies, particles, and even a level editor**? I did too. That\'s why I built **\\"Ninja Game\\"**, a pixel-art style platformer written entirely in Python using **Pygame**.\\n\\nIn this post, I\u2019ll walk you through how I designed and implemented a 2D platformer with an integrated **tile-based map editor**, sprite animation system, and basic AI \u2014 all while keeping the project organized and extensible.\\n\\n---\\n\\n\x3c!--truncate--\x3e\\n\\n## \ud83e\uddf1 Why I Built a Level Editor\\n\\nGame development is more than just jumping and shooting \u2014 it\u2019s about designing the world. So I built a **tilemap editor** that allows me to:\\n\\n- Place tiles from grouped assets (grass, stone, decor, etc.)\\n- Use scrollable canvas to design large levels\\n- Add enemies or decorations as \\"offgrid\\" tiles\\n- Save/load levels using JSON \\n\\n> \ud83d\udd01 The level editor also features mouse-wheel tile selection and simple `autotile` support for better visuals.\\n\\n---\\n\\n## \ud83d\ude80 Key Features\\n\\n### \u2705 Core Gameplay\\n\\n- Responsive platformer mechanics with double jump and wall slide  \\n- Dashing system that creates spark and particle trails   \\n- Enemies that patrol and shoot based on player distance  \\n\\n### \ud83e\udde0 Entities\\n\\n- **Player**: Dashing, jumping, wall sliding, and flipping \\n- **Enemy**: AI-based shooting behavior and knockback when hit\\n- **Particles**: For leaves, sparks, and hit effects\\n\\n### \ud83e\uddf0 Tools and Utilities\\n\\n- **`Animation` class** for smooth sprite transitions\\n- **`Tilemap` system** for both grid and off-grid objects\\n- **Asset loader** using `load_images()` and `load_image()` utilities \\n\\n---\\n\\n## \ud83d\uddfa\ufe0f Map Editing: Tips and Gotchas\\n\\nWhen working in `editor.py`, keep the following in mind:\\n\\n- **Offgrid Placement**: Objects like `decor`, `spawners`, or `enemy` must be placed **offgrid** using `G` key toggle. On-grid placement will crash the game during runtime.  \\n- **Player Spawn Point**: Manually place a `player` entity **offgrid** near the level\u2019s start. Otherwise, the player may respawn at the wrong location (like the death spot) after getting hit.\\n\\nThe editor is fully mouse-driven and supports save/load via the `O` key.\\n\\n---\\n\\n## \ud83d\udcc1 Folder Structure\\n\\n```\\nninja_game/\\n\u251c\u2500\u2500 data/\\n\u2502   \u251c\u2500\u2500 images/          # Sprites (player, enemy, tiles, etc.)\\n\u2502   \u251c\u2500\u2500 maps/            # JSON level files\\n\u2502   \u251c\u2500\u2500 sfx/             # Sound effects\\n\u2502   \u2514\u2500\u2500 music.wav        # Background music\\n\u251c\u2500\u2500 scripts/\\n\u2502   \u251c\u2500\u2500 clouds.py        # Parallax clouds system\\n\u2502   \u251c\u2500\u2500 entities.py      # PhysicsEntity, Player, Enemy\\n\u2502   \u251c\u2500\u2500 particle.py      # Particle rendering\\n\u2502   \u251c\u2500\u2500 spark.py         # Sparks from dashing and shooting\\n\u2502   \u251c\u2500\u2500 tilemap.py       # Map rendering and saving\\n\u2502   \u2514\u2500\u2500 utils.py         # Asset loading and animation\\n\u251c\u2500\u2500 editor.py            # Level editor (run separately)\\n\u251c\u2500\u2500 game.py              # Main game logic and loop\\n\u2514\u2500\u2500 map.json             # Default map file\\n```\\n\\n---\\n\\n## \ud83d\udd79\ufe0f Controls\\n\\n### In Game (`game.py`)\\n\\n- **A / D / W / S** \u2014 Move  \\n- **J** \u2014 Jump (with wall jump and double jump) \\n- **K** \u2014 Dash \\n- **ESC** \u2014 Quit \\n\\n### In Editor (`editor.py`)\\n\\n- **Mouse Left Click** \u2014 Place tile\\n- **Mouse Right Click** \u2014 Delete tile\\n- **Scroll Wheel** \u2014 Change tile group or variant\\n- **G** \u2014 Toggle ongrid / offgrid placement\\n- **O** \u2014 Save map to `map.json`\\n- **T** \u2014 Run `autotile()` for smoother edge tiles \\n\\n---\\n\\n## \ud83d\udd28 What I Learned\\n\\n- Handling collisions frame-by-frame using bounding rectangles\\n- Building reusable animation systems\\n- Managing parallax with varying cloud depths\\n- Designing for extensibility with asset-based organization\\n- JSON as a lightweight map format\\n\\n---\\n\\n## \ud83d\udce6 Future Improvements\\n\\n- Add GUI tile picker to the editor\\n- Camera shake during explosions\\n- Boss fights with multiple attack patterns\\n- Exporting maps to external game engines  \\n\\n---\\n\\n## \ud83d\udcac Final Thoughts\\n\\nThis project was a powerful learning experience in **game architecture, data-driven design, and asset management**. If you\'re looking to get into Python game development, Pygame is a great place to start.\\n\\nCheck out the full source code on GitHub:\\n\\n\ud83d\udc49 [**GitHub Repo: Ninja Game**](https://github.com/king-luvaha/ninja-game)\\n\\n---\\n\\n## \ud83d\udd17 Let\'s Connect\\n\\n- **GitHub**: [king-luvaha](https://github.com/king-luvaha)\\n- **Portfolio**: [Website](https://portfolio-website-luvaha.vercel.app/)\\n    \\n\\n---"},{"id":"7-python-web-development-frameworks-for-data-scientists","metadata":{"permalink":"/project-wiki/blog/7-python-web-development-frameworks-for-data-scientists","source":"@site/blog/posts/7-python-web-development-frameworks-for-data-scientists.md","title":"7 Python Web Development Frameworks for Data Scientists","description":"---","date":"2025-07-20T00:00:00.000Z","tags":[{"inline":true,"label":"Python","permalink":"/project-wiki/blog/tags/python"},{"inline":false,"label":"Web Frameworks","permalink":"/project-wiki/blog/tags/frameworks","description":"Web development frameworks commonly used in Python"},{"inline":false,"label":"Django","permalink":"/project-wiki/blog/tags/django","description":"High-level Python web framework for rapid development"},{"inline":false,"label":"Flask","permalink":"/project-wiki/blog/tags/flask","description":"Lightweight WSGI web application framework in Python"},{"inline":false,"label":"FastAPI","permalink":"/project-wiki/blog/tags/fastapi","description":"High-performance Python framework for building APIs with async support"},{"inline":false,"label":"Gradio","permalink":"/project-wiki/blog/tags/gradio","description":"Framework for creating machine learning web apps and demos"},{"inline":false,"label":"Streamlit","permalink":"/project-wiki/blog/tags/streamlit","description":"Fast way to build and share data apps in Python"},{"inline":false,"label":"Tornado","permalink":"/project-wiki/blog/tags/tornado","description":"Scalable, non-blocking web server and web framework for Python"},{"inline":false,"label":"Reflex","permalink":"/project-wiki/blog/tags/reflex","description":"Modern Python framework for building interactive web apps"}],"readingTime":2.99,"hasTruncateMarker":false,"authors":[{"name":"Ezra Luvaha","title":"Junior Developer","url":"https://portfolio-website-luvaha.vercel.app/","socials":{"linkedin":"https://www.linkedin.com/in/ezra-yeswa/","github":"https://github.com/king-luvaha"},"imageURL":"https://avatars.githubusercontent.com/u/163761408?v=4","key":"luvaha","page":null}],"frontMatter":{"slug":"7-python-web-development-frameworks-for-data-scientists","title":"7 Python Web Development Frameworks for Data Scientists","authors":"luvaha","tags":["Python","Frameworks","Django","Flask","FastAPI","Gradio","Streamlit","Tornado","Reflex"],"date":"2025-07-20T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"\ud83c\udfae Building a 2D Platformer Game with a Custom Level Editor in Python","permalink":"/project-wiki/blog/building-2D-platformer-ninja-game"},"nextItem":{"title":"\ud83e\udde0 Python Virtual Environments: venv vs virtualenv vs wrapper","permalink":"/project-wiki/blog/python-venv-vs-virtualenvwrapper-complete-setup-guide"}},"content":"---\\n\\n## Python Web Development Frameworks: A Comprehensive Guide\\n\\nPython is a top choice for web developers thanks to its straightforward syntax, emphasis on readability, and an expansive array of frameworks and tools. The language appeals to both beginners and seasoned pros, powering everything from rapid prototypes to robust, full-scale applications. Below, we review seven of the most popular Python web frameworks\u2014each offering unique strengths to help you efficiently bring your project to life.\\n\\n### 1. Django: The Full-Stack Powerhouse\\n\\nDjango is a mature, open-source framework renowned for enabling rapid development of secure and scalable web applications. Its comprehensive feature set includes:\\n\\n- **Built-in ORM (Object-Relational Mapper)**\\n- **Automatic admin interface**\\n- **Integrated authentication system**\\n- **Vast ecosystem of reusable apps and components**\\n\\nDjango is ideally suited for projects of any scale\u2014from simple websites to complex enterprise solutions.\\n\\n- Learn more: https://www.djangoproject.com/\\n\\n### 2. Flask: Minimalist and Flexible\\n\\nFlask is a lightweight microframework that provides the essentials for web development, allowing you to extend functionality with only the components you need. Highlights include:\\n\\n- **Minimal setup and simple API**\\n- **Perfect for small to medium apps and APIs**\\n- **Highly extensible through numerous third-party plugins**\\n- **Loved for its clean documentation and flexible design**\\n\\nFlask is especially appealing to those who want maximum control over their project architecture.\\n\\n- Learn more: https://flask.palletsprojects.com/\\n\\n### 3. FastAPI: Blazing-Fast Modern APIs\\n\\nFastAPI is a modern framework crafted for rapidly building high-performance APIs. Key features:\\n\\n- **Asynchronous support for fast, scalable applications**\\n- **Automatic interactive documentation (OpenAPI, Swagger)**\\n- **Built-in validation and serialization using Pydantic**\\n- **Supports building websites with Jinja templates (v2)**\\n\\nFastAPI is an ideal choice for applications where speed and developer experience are paramount.\\n\\n- Learn more: https://fastapi.tiangolo.com/\\n### 4. Gradio: Effortless ML Web Interfaces\\n\\nGradio specializes in making web interfaces for machine learning models simple and accessible. With Gradio, you can:\\n\\n- **Build and share web-based ML demos in minutes**\\n- **Deploy on Hugging Face for free**\\n- **No need for front-end expertise\u2014basic Python knowledge suffices**\\n- **Popular within the ML and data science community**\\n\\nGradio lowers the barrier for showcasing ML models on the web.\\n\\n- Learn more: https://www.gradio.app/\\n\\n### 5. Streamlit: Instant Data Apps\\n\\nStreamlit is tailored for data scientists and engineers who want to create interactive web apps directly from Python scripts. Key strengths include:\\n\\n- **Rapid creation of dashboards and ML model demos**\\n- **No HTML, CSS, or JavaScript required**\\n- **Intuitive API designed for quick prototyping**\\n- **Seamless data visualization and sharing with non-technical stakeholders**\\n\\nStreamlit\u2019s simplicity lets you focus on data and insight rather than front-end code.\\n\\n- Learn more: https://streamlit.io/\\n\\n### 6. Tornado: Non-Blocking, Scalable Performance\\n\\nTornado combines a web framework with an asynchronous networking library. Its core benefits are:\\n\\n- **Designed for handling thousands of concurrent connections**\\n- **Non-blocking I/O model for real-time web services**\\n- **Suitable for live updates, chat apps, and long polling**\\n\\nTornado is perfect for complex, high-performance applications relying on real-time communication.\\n\\n- Learn more: https://www.tornadoweb.org/en/stable/guide.html\\n\\n### 7. Reflex: Full-Stack Python, Zero JavaScript\\n\\nReflex (formerly Pynecone) enables you to build entire web apps using only Python\u2014no JavaScript needed. Highlights:\\n\\n- **Compiles Python into modern, production-ready web apps**\\n- **Handles both frontend and backend seamlessly**\\n- **Ideal for Python developers wanting interactive UIs without switching languages**\\n\\nReflex allows for end-to-end development in Python, simplifying the build process for interactive web applications.\\n\\n- Learn more: https://reflex.dev/\\n\\nWhether prioritizing rapid prototyping, scalability, ML integration, or pure Python development, these frameworks empower you to choose the right tool for your project\u2019s needs. Each framework brings its own approach, letting you balance flexibility, performance, and productivity."},{"id":"python-venv-vs-virtualenvwrapper-complete-setup-guide","metadata":{"permalink":"/project-wiki/blog/python-venv-vs-virtualenvwrapper-complete-setup-guide","source":"@site/blog/posts/Virtual-Environment-Setup-Guide.md","title":"\ud83e\udde0 Python Virtual Environments: venv vs virtualenv vs wrapper","description":"---","date":"2025-07-10T00:00:00.000Z","tags":[{"inline":true,"label":"Python","permalink":"/project-wiki/blog/tags/python"},{"inline":false,"label":"Python Tutorial","permalink":"/project-wiki/blog/tags/python-tutorial","description":"Python tutorials and educational content"},{"inline":false,"label":"venv","permalink":"/project-wiki/blog/tags/venv","description":"Python virtual environments using venv"},{"inline":false,"label":"virtualenv","permalink":"/project-wiki/blog/tags/virtualenv","description":"Python virtual environments using virtualenv"},{"inline":false,"label":"virtualenvwrapper","permalink":"/project-wiki/blog/tags/virtualenvwrapper","description":"Wrapper tools for managing virtualenvs"},{"inline":false,"label":"Developer Tools","permalink":"/project-wiki/blog/tags/developer-tools","description":"Useful tools and setups for developers"}],"readingTime":3.41,"hasTruncateMarker":true,"authors":[{"name":"Ezra Luvaha","title":"Junior Developer","url":"https://portfolio-website-luvaha.vercel.app/","socials":{"linkedin":"https://www.linkedin.com/in/ezra-yeswa/","github":"https://github.com/king-luvaha"},"imageURL":"https://avatars.githubusercontent.com/u/163761408?v=4","key":"luvaha","page":null}],"frontMatter":{"slug":"python-venv-vs-virtualenvwrapper-complete-setup-guide","title":"\ud83e\udde0 Python Virtual Environments: venv vs virtualenv vs wrapper","authors":"luvaha","tags":["Python","python-tutorial","venv","virtualenv","virtualenvwrapper","developer-tools"],"date":"2025-07-10T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"7 Python Web Development Frameworks for Data Scientists","permalink":"/project-wiki/blog/7-python-web-development-frameworks-for-data-scientists"},"nextItem":{"title":"Getting Started with Python","permalink":"/project-wiki/blog/getting-started-with-python"}},"content":"---\\n\\nIf you\u2019re a Python developer, you\u2019ve likely encountered the need to isolate dependencies for each project. That\u2019s where **virtual environments** come in. But with tools like `venv`, `virtualenv`, and `virtualenvwrapper` floating around, which one should you use?\\n\\nIn this post, we\u2019ll explain what each tool does, when to use it, and provide platform-specific setup instructions for **Windows**, **Linux**, and **macOS**.\\n\\n---\\n\\n\x3c!--truncate--\x3e\\n\\n## \ud83d\udc0d What Is a Virtual Environment?\\n\\nA **virtual environment** is a self-contained directory that contains a Python interpreter and all the packages your project needs \u2014 isolated from your system-wide Python.\\n\\nWithout one, installing packages with `pip` would affect your entire system and other projects.\\n\\n---\\n\\n## \u2699\ufe0f Tool Overview and Purpose\\n\\n### \u2705 `venv` \u2014 Python\u2019s Built-in Virtual Environment Module\\n\\n- **Built-in** since Python 3.3+\\n- Lightweight and easy to use\\n- Great for beginners or simple projects\\n\\n\ud83d\udce6 Creates isolated environments with their own Python binary and `site-packages`.\\n\\n---\\n\\n### \u2705 `virtualenv` \u2014 A More Powerful Alternative\\n\\n- External tool; install via `pip`\\n- Compatible with Python 2 and early Python 3\\n- More features and speed than `venv`\\n- Allows you to specify a Python interpreter\\n\\n\ud83d\udce6 Creates environments similarly to `venv`, but with greater flexibility and support for legacy Python.\\n\\n---\\n\\n### \u2705 `virtualenvwrapper` \u2014 A Productivity Booster for `virtualenv`\\n\\n- A set of shell scripts (for Unix) or CLI tools (for Windows)\\n- Adds commands like `mkvirtualenv`, `workon`, `rmvirtualenv`\\n- Centralizes all environments in a single directory\\n\\n\ud83d\udce6 Ideal for developers managing many Python projects and switching between them often.\\n\\n---\\n\\n## \ud83c\udf33 Decision Tree: Which One Should You Use?\\n\\n```\\nAre you using Python 3.3+?\\n\u2502\\n\u251c\u2500\u2500 No \u2192 Use `virtualenv`\\n\u2502\\n\u2514\u2500\u2500 Yes\\n    \u2502\\n    \u251c\u2500\u2500 Want something built-in and simple? \u2192 Use `venv`\\n    \u2502\\n    \u2514\u2500\u2500 Do you manage many projects and want shell commands for easy switching?\\n        \u2514\u2500\u2500 Yes \u2192 Use `virtualenvwrapper`\\n```\\n\\n---\\n\\n## \ud83d\udd27 Platform-Specific Setup Instructions\\n\\nLet\u2019s break it down by platform: **Windows**, **Linux**, and **macOS**.\\n\\n---\\n\\n### \ud83e\ude9f WINDOWS\\n\\n#### \ud83d\udd39 Using `venv` on Windows\\n\\n```bash\\n# Create environment\\npython -m venv myenv\\n\\n# Activate (Command Prompt)\\nmyenv\\\\Scripts\\\\activate.bat\\n\\n# Activate (PowerShell)\\nmyenv\\\\Scripts\\\\Activate.ps1\\n\\n# Deactivate\\ndeactivate\\n```\\n\\n#### \ud83d\udd39 Using `virtualenv` on Windows\\n\\n```bash\\npip install virtualenv\\n\\n# Create environment\\nvirtualenv myenv\\n\\n# Activate (Command Prompt)\\nmyenv\\\\Scripts\\\\activate.bat\\n\\n# Activate (PowerShell)\\nmyenv\\\\Scripts\\\\Activate.ps1\\n\\n# Deactivate\\ndeactivate\\n```\\n\\n#### \ud83d\udd39 Using `virtualenvwrapper-win`\\n\\nInstall the Windows-compatible wrapper:\\n\\n```bash\\npip install virtualenvwrapper-win\\n```\\n\\nUsage:\\n\\n```bash\\nmkvirtualenv myenv\\nworkon myenv\\nrmvirtualenv myenv\\ndeactivate\\n```\\n\\n\ud83d\udca1 By default, environments are stored in `%USERPROFILE%\\\\Envs`.\\n\\n---\\n\\n### \ud83d\udc27 LINUX (Ubuntu/Debian-based)\\n\\n#### \ud83d\udd39 Using `venv` on Linux\\n\\n```bash\\nsudo apt install python3-venv\\n\\n# Create environment\\npython3 -m venv myenv\\n\\n# Activate\\nsource myenv/bin/activate\\n\\n# Deactivate\\ndeactivate\\n```\\n\\n#### \ud83d\udd39 Using `virtualenv` on Linux\\n\\n```bash\\npip install virtualenv\\n\\n# Create environment\\nvirtualenv myenv\\n\\n# Activate\\nsource myenv/bin/activate\\n\\n# Deactivate\\ndeactivate\\n```\\n\\n#### \ud83d\udd39 Using `virtualenvwrapper` on Linux\\n\\n```bash\\npip install virtualenv virtualenvwrapper\\n\\n# Add to ~/.bashrc or ~/.zshrc\\nexport WORKON_HOME=$HOME/.virtualenvs\\nexport VIRTUALENVWRAPPER_PYTHON=$(which python3)\\nsource $(which virtualenvwrapper.sh)\\n\\n# Apply changes\\nsource ~/.bashrc  # or source ~/.zshrc\\n```\\n\\nThen:\\n\\n```bash\\nmkvirtualenv myenv\\nworkon myenv\\nrmvirtualenv myenv\\ndeactivate\\n```\\n\\n---\\n\\n### \ud83c\udf4f macOS\\n\\n#### \ud83d\udd39 Using `venv` on macOS\\n\\n```bash\\n# Use built-in venv\\npython3 -m venv myenv\\n\\n# Activate\\nsource myenv/bin/activate\\n\\n# Deactivate\\ndeactivate\\n```\\n\\n#### \ud83d\udd39 Using `virtualenv` on macOS\\n\\n```bash\\npip3 install virtualenv\\n\\n# Create environment\\nvirtualenv myenv\\n\\n# Activate\\nsource myenv/bin/activate\\n\\n# Deactivate\\ndeactivate\\n```\\n\\n#### \ud83d\udd39 Using `virtualenvwrapper` on macOS\\n\\n```bash\\npip3 install virtualenv virtualenvwrapper\\n\\n# Add to ~/.zshrc or ~/.bash_profile\\nexport WORKON_HOME=$HOME/.virtualenvs\\nexport VIRTUALENVWRAPPER_PYTHON=$(which python3)\\nsource $(which virtualenvwrapper.sh)\\n\\n# Apply changes\\nsource ~/.zshrc  # or ~/.bash_profile\\n```\\n\\nThen:\\n\\n```bash\\nmkvirtualenv myenv\\nworkon myenv\\nrmvirtualenv myenv\\ndeactivate\\n```\\n\\n---\\n\\n## \ud83e\uddea Common `virtualenvwrapper` Commands\\n\\nHere are the commands you\u2019ll use daily:\\n\\n| Command              | Description                                    |\\n| -------------------- | ---------------------------------------------- |\\n| `mkvirtualenv myenv` | Create a new virtual environment named `myenv` |\\n| `workon`             | List all environments                          |\\n| `workon myenv`       | Activate the `myenv` environment               |\\n| `deactivate`         | Exit the current environment                   |\\n| `rmvirtualenv myenv` | Delete the environment named `myenv`           |\\n\\n---\\n\\n## \ud83d\udcca Feature Comparison Table\\n\\n|Feature|`venv`|`virtualenv`|`virtualenvwrapper`|\\n|---|---|---|---|\\n|Built-in (Python 3.3+)|\u2705|\u274c|\u274c|\\n|Supports Python 2|\u274c|\u2705|\u2705|\\n|Lightweight|\u2705|\u2705|\u26a0\ufe0f Shell-dependent|\\n|Easy switching|\u274c|\u274c|\u2705|\\n|Centralized env storage|\u274c|\u274c|\u2705|\\n|Custom automation hooks|\u274c|\u26a0\ufe0f Limited|\u2705|\\n|Ideal for many projects|\u274c|\u26a0\ufe0f|\u2705|\\n|Great for beginners|\u2705|\u2705|\u26a0\ufe0f Slight learning curve|\\n\\n---\\n\\n## \ud83e\uddfc Summary: When to Use What?\\n\\n|Use Case|Recommended Tool|\\n|---|---|\\n|New to Python|`venv`|\\n|Legacy Python or cross-version use|`virtualenv`|\\n|Managing many projects|`virtualenvwrapper`|\\n|IDE integration (VS Code, PyCharm)|`venv`|\\n|Need custom activate hooks|`virtualenvwrapper`|\\n\\n---\\n\\n## \u2705 Conclusion\\n\\n- Start with `venv` for simplicity and speed.\\n- Use `virtualenv` if you\'re dealing with legacy versions.\\n- Upgrade to `virtualenvwrapper` if you\'re managing **multiple projects** and want **productivity tools** like `workon`, `rmvirtualenv`, and centralized management."},{"id":"getting-started-with-python","metadata":{"permalink":"/project-wiki/blog/getting-started-with-python","source":"@site/blog/posts/getting-started-with-python.md","title":"Getting Started with Python","description":"Python is one of the most popular and beginner-friendly programming languages in the world. It is widely used in web development, data science, automation, artificial intelligence, and more.","date":"2025-06-27T00:00:00.000Z","tags":[{"inline":false,"label":"Python","permalink":"/project-wiki/blog/tags/python","description":"Learn Python programming, tutorials, and tips"},{"inline":false,"label":"Beginner","permalink":"/project-wiki/blog/tags/beginner","description":"Content for beginner-level learners and programmers"},{"inline":false,"label":"Programming","permalink":"/project-wiki/blog/tags/programming","description":"Posts related to coding, software development, and engineering"}],"readingTime":1.29,"hasTruncateMarker":true,"authors":[{"name":"Ezra Luvaha","title":"Junior Developer","url":"https://portfolio-website-luvaha.vercel.app/","socials":{"linkedin":"https://www.linkedin.com/in/ezra-yeswa/","github":"https://github.com/king-luvaha"},"imageURL":"https://avatars.githubusercontent.com/u/163761408?v=4","key":"luvaha","page":null}],"frontMatter":{"slug":"getting-started-with-python","title":"Getting Started with Python","authors":"luvaha","tags":["python","beginner","programming"],"date":"2025-06-27T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"\ud83e\udde0 Python Virtual Environments: venv vs virtualenv vs wrapper","permalink":"/project-wiki/blog/python-venv-vs-virtualenvwrapper-complete-setup-guide"}},"content":"Python is one of the most popular and beginner-friendly programming languages in the world. It is widely used in web development, data science, automation, artificial intelligence, and more.\\n\\nIn this blog post, we\'ll explore what makes Python so powerful, why you should learn it, and how to get started writing your first Python program.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83d\ude80 Why Learn Python?\\n\\n- **Easy to Read and Write**: Python uses simple syntax similar to English.\\n- **Huge Community**: A massive community means lots of tutorials, libraries, and support.\\n- **Versatile**: Use it for web apps, AI, data analysis, games, automation, and more.\\n\\n## \ud83d\udee0\ufe0f Setting Up Python\\n\\n1. Download Python from the [official site](https://python.org).\\n2. Install an editor like VS Code or PyCharm.\\n3. Open your terminal or command prompt and type:\\n\\n```bash\\npython --version\\n````\\n\\nYou should see something like `Python 3.x.x`.\\n\\n## \u270d\ufe0f Your First Python Program\\n\\nCreate a new file called `hello.py` and add:\\n\\n```python\\nprint(\\"Hello, world!\\")\\n```\\n\\nThen run it in your terminal:\\n\\n```bash\\npython hello.py\\n```\\n\\nYou should see:\\n\\n```\\nHello, world!\\n```\\n\\n## \ud83d\udce6 Exploring Python Packages\\n\\nYou can install third-party libraries using `pip`, Python\u2019s package manager:\\n\\n```bash\\npip install requests\\n```\\n\\nThen use it in your code:\\n\\n```python\\nimport requests\\n\\nresponse = requests.get(\\"https://api.github.com\\")\\nprint(response.json())\\n```\\n\\n## \ud83e\udde0 Tips for Beginners\\n\\n- Practice small projects daily.\\n- Read other people\u2019s code.\\n- Ask questions on forums like Stack Overflow.\\n- Explore Python packages on [PyPI](https://pypi.org).\\n\\n## \ud83d\udcda Useful Resources\\n\\n- [Python Docs](https://docs.python.org/3/)\\n- [Real Python](https://realpython.com/)\\n- [Automate the Boring Stuff](https://automatetheboringstuff.com/)\\n\\n---\\n\\nHappy coding! Python is a great language to start your programming journey and build amazing things."}]}}')}}]);